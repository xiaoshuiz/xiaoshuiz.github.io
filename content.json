{"meta":{"title":"Dist Blog","subtitle":null,"description":null,"author":"xiaoshuiz","url":"http://yoursite.com"},"pages":[],"posts":[{"title":"新成员来啦！","date":"2018-11-02T01:16:24.000Z","path":"2018/11/02/咲咲/","text":"给你们隆重介绍一下我的小老弟!大名：子咲 小名：咲咲! 这是一个刚来的小老弟，四个月了，布偶弟弟。皮王之王! 先给你们上个图！是不是超可爱，蓝色的眼睛中有星空一般。还有多角度拍摄！只不过啊。布偶是名副其实的玻璃胃，吃的东西太挑了。给他买的猫奶糕，营养膏，黄芪多糖口服液各种各种，每天吃的比我都好! 而且啊！ 他特别粘人！就是你不看着我睡觉 你就不能玩其他的那种！ 论睡姿可是多样的！ 这样这样还有这样！ 而且不让你走的时候！ 超！ 凶！！！每天陪他玩累的一批 他可太能跑了啊最后再放几张他的表情包，确认键是他按的，不要问我有没有经过他同意！","raw":"---\ntitle: 新成员来啦！\ndate: 2018-11-02 09:16:24\ntags: 咲咲\ncategories: 生活\n---\n<font size=4 face=\"黑体\" >给你们隆重介绍一下我的小老弟!\n\n大名：子咲 小名：<font color=#ff7072 >咲咲!</font></font>\n\n<br>\n这是一个刚来的小老弟，四个月了，布偶弟弟。皮王之王!\n\n先给你们上个图！\n![](https://i.imgur.com/tTDuaze.jpg)\n是不是超可爱，蓝色的眼睛中有星空一般。\n![](https://i.imgur.com/Z9h1LBj.jpg)\n![](https://i.imgur.com/MN0qwvy.jpg)\n还有多角度拍摄！\n![](https://i.imgur.com/23JQLEy.jpg)\n![](https://i.imgur.com/SSje9N6.jpg)\n![](https://i.imgur.com/WMOvxxf.jpg)\n只不过啊。布偶是名副其实的玻璃胃，吃的东西太挑了。给他买的猫奶糕，营养膏，黄芪多糖口服液各种各种，每天吃的比我都好!\n\n<iframe align=\"center\" width=\"700\" height=\"415\" src=\"//player.bilibili.com/player.html?aid=34962402&cid=61251307&page=1\" scrolling=\"no\" border=\"0\" frameborder=\"no\" framespacing=\"0\" allowfullscreen=\"true\"> </iframe>\n\n而且啊！ 他特别粘人！就是你不看着我睡觉 你就不能玩其他的那种！\n\n![](https://i.imgur.com/9RWlU20.jpg)\n论睡姿可是多样的！\n\n![](https://i.imgur.com/D7GnAku.jpg)\n这样\n![](https://i.imgur.com/aUsxXxR.jpg)\n这样\n![](https://i.imgur.com/aoPDBGf.jpg)\n还有这样！\n\n而且不让你走的时候！ 超！ 凶！！！\n![](https://i.imgur.com/weDZJXY.jpg)\n每天陪他玩累的一批\n\n他可太能跑了啊\n![](https://i.imgur.com/fWtPdEM.jpg)\n![](https://i.imgur.com/AO4i2Nf.jpg)\n最后再放几张他的表情包，确认键是他按的，不要问我有没有经过他同意！\n![](https://i.imgur.com/5nBtSCl.jpg)\n![](https://i.imgur.com/J8yRYDL.jpg)\n![](https://i.imgur.com/1gs7uyU.jpg)","content":"<font size=\"4\" face=\"黑体\">给你们隆重介绍一下我的小老弟!<br><br>大名：子咲 小名：<font color=\"#ff7072\">咲咲!</font></font>\n\n<p><br><br>这是一个刚来的小老弟，四个月了，布偶弟弟。皮王之王!</p>\n<p>先给你们上个图！<br><img src=\"https://i.imgur.com/tTDuaze.jpg\" alt=\"\"><br>是不是超可爱，蓝色的眼睛中有星空一般。<br><img src=\"https://i.imgur.com/Z9h1LBj.jpg\" alt=\"\"><br><img src=\"https://i.imgur.com/MN0qwvy.jpg\" alt=\"\"><br>还有多角度拍摄！<br><img src=\"https://i.imgur.com/23JQLEy.jpg\" alt=\"\"><br><img src=\"https://i.imgur.com/SSje9N6.jpg\" alt=\"\"><br><img src=\"https://i.imgur.com/WMOvxxf.jpg\" alt=\"\"><br>只不过啊。布偶是名副其实的玻璃胃，吃的东西太挑了。给他买的猫奶糕，营养膏，黄芪多糖口服液各种各种，每天吃的比我都好!</p>\n<iframe align=\"center\" width=\"700\" height=\"415\" src=\"//player.bilibili.com/player.html?aid=34962402&cid=61251307&page=1\" scrolling=\"no\" border=\"0\" frameborder=\"no\" framespacing=\"0\" allowfullscreen=\"true\"> </iframe>\n\n<p>而且啊！ 他特别粘人！就是你不看着我睡觉 你就不能玩其他的那种！</p>\n<p><img src=\"https://i.imgur.com/9RWlU20.jpg\" alt=\"\"><br>论睡姿可是多样的！</p>\n<p><img src=\"https://i.imgur.com/D7GnAku.jpg\" alt=\"\"><br>这样<br><img src=\"https://i.imgur.com/aUsxXxR.jpg\" alt=\"\"><br>这样<br><img src=\"https://i.imgur.com/aoPDBGf.jpg\" alt=\"\"><br>还有这样！</p>\n<p>而且不让你走的时候！ 超！ 凶！！！<br><img src=\"https://i.imgur.com/weDZJXY.jpg\" alt=\"\"><br>每天陪他玩累的一批</p>\n<p>他可太能跑了啊<br><img src=\"https://i.imgur.com/fWtPdEM.jpg\" alt=\"\"><br><img src=\"https://i.imgur.com/AO4i2Nf.jpg\" alt=\"\"><br>最后再放几张他的表情包，确认键是他按的，不要问我有没有经过他同意！<br><img src=\"https://i.imgur.com/5nBtSCl.jpg\" alt=\"\"><br><img src=\"https://i.imgur.com/J8yRYDL.jpg\" alt=\"\"><br><img src=\"https://i.imgur.com/1gs7uyU.jpg\" alt=\"\"></p>\n","slug":"咲咲","updated":"2018-11-01T09:51:16.049Z","comments":true,"link":"","permalink":"http://yoursite.com/2018/11/02/咲咲/","excerpt":"","categories":[{"name":"生活","slug":"生活","permalink":"http://yoursite.com/categories/生活/"}],"tags":[{"name":"咲咲","slug":"咲咲","permalink":"http://yoursite.com/tags/咲咲/"}]},{"title":"Not fated","date":"2018-11-01T01:16:24.000Z","path":"2018/11/01/别过/","text":"2018年5月24日，到今天五个多月了。想想这一路走来，还是要感谢你的陪伴吧。你写过两封信给我，关于你，我好像并没有写过什么吧。 关于你的东西，拿起来了，终究要放下吧。我一直逃避着不去想这些也不是办法，那就让这段感情也分的清清楚楚吧，在今天中午午休的时候又想起来了你，想着下午不忙，那就整理一下思绪吧。 从什么说起呢。 高中厕所后面的对话？高考完的分开？还是大一时候的复合？ 我也不知道从何说起了，那个时间或许自己对感情并不了解吧，或许我现在对感情也并不理解了。 只知道高中时间，逗你玩，趁着送你礼物偷亲你额头，在你十八岁成人礼的KTV里拥吻你，因为别人调戏你跑到别人班级讲台上向他们一个班宣战，和你写的纸条，看你害羞的表现，又或者过分到欺骗你想要获取你的关注，尽管不懂爱情吧，但真的那个时候很开心吧。 高考完的分开，也是我第一次见识到你的冷酷与逃避吧。尽管可能当时的你比我成熟？比我想得多？但在我看来，你还是逃避了这些问题，或许这就是咱俩面对问题的处理方式不同吧。 当时的自己真想一次性的恨透你，然后再也不去触碰你，无奈我这个人就这点太差劲了吧，敢爱不敢恨。又或者在我高中那个撒谎成性的骗子的脑子里面就没有爱和恨的分别呢。 在那段分开的半年里，你说你又谈了一次恋爱，这是后来你告诉我的。我呢，也遇到一个挺喜欢的女孩，在那段时间里和她相处的也很开心，一起吃吃玩玩甚至和朋友一起入住一间公寓里。但是都没敢回应这份感情，因为内心对你的情感并没有完全放下。仔细想想，如果当时回应了这份感情是不是就不会像现在那么挣扎了。真是个冷笑话。 后来和你复合了。是啊，讲实话，我当时感觉对那个女生的感情都要赶超你了，我也不知道为什么要去找你聊天，找你聊感情的问题。或者直观的讲，为什么要和你复合。可能内心深处还是对你的感情更深吧，也正是这个问题，让我冷酷的驳回了自己对那个女生的感情。这也是我大学四年来一个内疚的一件事，尽管毕业的时候对那个女生说明了这件事，她笑了笑，我也没希望得到她的谅解。或者说如果咱俩没分开的话，或许我那段话就一辈子不会和她讲了吧。 至于咱俩的复合，我有时候也弄不清具体原因，因为我决定把我骗子的伪装撕开了去面对你吗？还是只是你当时的心软了一下罢了。那也是我第一次决定全身心的相信一个人，才自愿揭露所有谎言。 接下来的时间里，首先要感谢你的真心相待，我不知道对于你来说，付出真心的过程容不容易，最起码对于我来说是个困难的过程，所以首先要感谢你的真心陪伴。 在这段时间里，在这段从威海到昆明的异地时间里，也让我以后决定即使今后一个人过，也不会再去找一个异地的人陪伴。是啊，异地很难过，难过到让我一个那么执拗的，不信邪的人最好还是折服了下来。或者说咱俩熬过了异地，却没熬过异地带来的伤害。 尽管如此，在一起的时间也是我二十一岁时光里最高兴的时间。因为我有了一个我完全信任的人，有这样的人存在，即使不在身边也会安心。 第一个情人节，也是我平生第一次送花，本来打算从昆明这个花海城市里面买了寄过去，但是人家说鲜花到那都死了，便提前和你学校附近的花店联系好，然后一直内心脑补着你收到这九十九朵玫瑰的时候的表情。 放假回家是能够共处的时间，也是在学校压抑了许久的感情释放的时间，以至于总想着黏在你身上，或者抱着你一天躺在床上也不会觉得乏味。没办法啊，像我这种闷性子，在异地的时间里能有东西打发想你的时间就尽量不去想你，因为想却见不到，碰不到的现实是最难过的。但是你后来告诉我，感觉我在学校的时候就很高冷，回家了就格外热情，又是开房又是什么的，怀疑我是不是只把你当成泄出性欲的工具，其实你没说这句话，但是我听到了这个意思，当时的我怔了一下，我这人有时候性欲是挺强的，但是我还不是那么没人性的人。其实在你有这个想法的时候，也就是当时在酒店里聊这些的时候，我就知道，这段感情要完了。至于你为什么会说到这些，我现在慢慢的也知道了。 但是前些假期回家，基本上会陪着你去驾校学车，怕你一个人学车无聊，便喊着朋友去那打牌，等你学完把你送回家，或者吃个饭回家。其实想想个别时候，我表现出来的高冷的伪装，你还是可以看破的，只是可能后来不想去揭破了吧。驾校啊，也是我第一次见到你那弟弟和表哥的地方。再想想自己学车的时候，心里多少会抱怨吧。毕竟那段时间是咱俩感情危机。 你曾经瞒着叔叔阿姨跑到昆明找我，等我考试，有一次我考试还迟到了，那一科刚好是概率论。一起去了西双版纳，那可是我大学四年唯一一次离开昆明出去旅游，想想大学应该多转转的。还在西双版纳吃了好吃的鸡爪，叫什么二中鸡爪，你特别爱吃，后台还专门找他家的店的联系方式，让那哥哥给你寄了过去，去了西双版纳也没怎么跑，只逛了中科院植物园，第二天你就感冒了，我也不知道附近哪有药店，还绕着那条街走了好远，买到了药，还想着买了些鸡爪能够给你涨点食欲。你还那你的头绳给我扎了个辫子，我害羞的从后面抱着你，你还对着镜子拍了照。现在慢慢的也敢于去想这些了吧，刚分开的时候这些总怕想了给自己找罪受。 因为你学校在山东，所以我去你学习还是方便一些，回家的时候总是可以去转一下待几天陪你，陪你去那边的山上的庙里祈福，那边的藤椒米线我就没找到过第二家，你买的床单被罩本来打算和你送的那么多东西一起放起来再也不用了，但是想了想，既然要去放下，就要面对，只不过睡那个床单多少会想到你吧。 是呀，你送了我很多东西，以至于分开的时候整理你的东西差点让我过不下去，过生日你写过两封信给我，第一次织围巾，虽然那个围巾我没有舍得围过，让我戒烟，却不忍心看我想抽烟的样子，还送了zippo给我。情侣装，腰带，钱包卡包，就连你的照片架我都得一一在前段时间里收起来。 还有一次下着雪，你感冒了要打点滴，陪着你的时候也是我第一次见到叔叔阿姨，也是那一次叔叔送我会酒店的路上和我说的话，让我变了。是的，他让我意识到我必须要好好找工作，才能给你一个好的生活，他才会放心的把你交到我手上。人长大的过程，总会有些物质的部分。 这些时光，是我人生中重要的一部分，我现在觉得我不会去刻意去忘记或者去逃避，他是我的一部分，尤为重要的一部分。 至于咱俩的分开，我现在慢慢的也想到了一些，我是理智的人，你也是理智的人，这是最可悲的事。 你考研的那段时间，可能就是根本的诱因吧。我没有陪到你，还有像你说的，那段时间你生病了，你发生了车祸，你发生了种种可能都没有告诉我，都一个人扛过去，觉得有时候一个人也过得下去。其实想想这是我的问题，也是你的问题吧，问题在我没有关注到你，问题在你要决定放下我在你心里的比重，其实在你有这个想法的时候，咱们两个的感情已经意味破了一半了吧。那是你对我或者对咱俩相处的那个样子已经失望到临界点了吧。至于这个失望，又肯定是我让你一点一点累积的吧。 我问你为什么当时不给我说，让我去陪你，你回答我当时我当时也不对劲，也没打算告诉我给我增加压力，是呀，这就是两个理智的人的恋爱的悲哀吧。 你的这种慢慢的比重减轻，也就是我内心不满的积累。 现在说已经无所谓了吧，那段时间我告诉你我睡眠不好，还回家呆了一段时间，其实是被心理医生诊断到了一种名叫焦躁症和神经官能症的精神病和神经病。当时我自己都被吓到了，我得了精神病。我自己都接受不了的病。你可能体会不到那种痛苦，毕业，就业，工作，生活，恋爱，家庭的东西把我折磨到崩溃，焦躁症发作的时候我真的感觉我快要死了，快要活不下去了。晚上睡不着觉，白天精神恍惚，心里烦起来感觉浑身失了火。内心的不满和暴躁会被放大。你的影响更会被放大。但这些我也没敢和你说，回家，实习期间自己慢慢吃药，有时候陪你聊天的时候都感觉自己恍惚到不是自己了，晚上没办法陪到和你一起睡觉的点，要不脑袋像炸了一样，只能提前和你说晚安，本来相处最宝贵的时间也就又被剥夺了，因为什么呢，你在考研。还是那句话，这就是两个理智的人的悲哀吧。 这也就是为什么前段时间因为你谈了新男朋友我暴躁的原因吧。内心总想着我为了你考研忍受精神折磨，你却自己一点不重视二次考研，还有心思恋爱。当时焦躁症就发作了，那天下午在公司直接坐不住了。现在想想，只是我一个人的臆想罢了吧。 故事发展到你的考研失败，我工作稳定了。过年回到家，你考研不得意，精神不振，我呢，呵，精神病，还要强控制着自己情绪和你交流。当时在酒店里提到了分手，你否认了。其实那次之后，基本上这段感觉也就意味这结束了。这都是后话，当时并不知道会这样。 当时呢，既然决定要继续，那我就要多做调整了，因为我工作稳定了，压力小了，你要二次考研，压力更大，我想在我只要好好陪着你二次考研就行了。但是事情并不如意，你虽然日常回信息，给微爱里面的小树浇水，但是你对我的感情已经变了，也就是你已经放低了我在你心里的比重，所以我找你，你回馈给我的是 你不知道给我讲什么。我想着我可以再忍忍，等你考研结束了或许就好了。最后还是我没坚持住吧，受不下去你无视的我爆发了，逼着你和我提了分手。原因？一是自己受够了冷落，二是对于那个阶段的你，这种“不知道说什么”的感情肯定不如不谈恋爱更加少分一些你考研的心。对两个人都好，你可以安心考验，我也不用天天热脸贴冷屁股，两个人都能把当时的情绪好好整理一下。对两个人人都好，对于会不会复合，我当时也只有了随缘，没有了坚持。想着等你考研完了，在好好聊一聊，能在一起就继续，不能在一起，就好好的给这段感情画个句号，正好那个时间也快到你生日了，送你本来打算送给你的神仙水。说到这个，可能我也有些变质了吧，工作了之后，开始会以物质的方面考虑问题。但我也没听你提到过相关的东西，不知道有没有引起你什么不适。 然后就到前几天的大吵了吧。因为发现你谈了新男朋友，怎么说呢。确实不关我事。但是总觉得你骗了我，这也不怨你，因为你的角度，我就是和你分手了，两个人不相干了，而我的角度是，我和你分手了，但是没和你分的明明白白，我要等你考完研和你好好算清楚，结果你却在期间又找了男朋友，还是在考研期间，在我都不忍干预的考研期间。然后我的情绪就爆发了，想想也是很不应该，尽管第二天给你发了短信道歉。但多少心里还有不适，因为一切的始作俑者是我，你是不知情的，我为什么要以你是一个知情者的角度去斥责你呢。不过和你聊的时候，你好像误以为我在怀疑你，这点我自己确实有过一瞬间的怀疑，但被我打消了，因为如果连你我都怀疑的话，我大学四年是靠什么坚持下去这份感情的呢。但是你当时的狠心的语气确实惊讶了我，我没想到我一直让你性格硬一点，不要那么软，结果一硬起来竟然就是对着我。心第一次感受到了冰冷的感觉。 是啊，这又是理性了吧。真是令人心烦的理性。可能两个人都不好受，还不如直接感性一点，直接祝福你今年考研两个人都再失败就好了，既然你没有一门心思地去考研，我还祝福你什么考研顺利？但还是理性赢了。 人呢，撒的谎多了，精神容易出问题，这个我验证过了。 想的东西多了，复杂了，把生活当成偶像剧来过了，精神也容易出问题，这个我也验证过了。 所以我也只求接下来好好过自己的真实生活，不再撒谎，不要再讲什么善意的谎言，是谎言就是谎言。哪怕我接下来一个人活到我死。也不想再去做这些无谓的掩饰了，简单点真实点可能才是生活吧，要不活久了就不知道自己在哪个世界里了，这点要多谢谢你，要不我可能大学期间，这个精神病就发作了吧。多谢你可以让我真心以对吧。 至于你呢，虽然这样荒诞的结束了。但是我这个性子就是这样，在第一次你走之后就认识到的那点，敢爱不敢恨。再害怕失去你，错过的终究要错过，只不过到真正结束两个人都没有见上一面。可能是这一辈的遗憾和笑柄吧。还想着等你考研完再和你面对面坐下来好好聊？可能我这一辈子也不做第二次这么蠢的事了。所以呢，还是祝福一下吧，不知道自己能活多久呢，活得短了可能你就是这一辈子里最重要的人之一了吧，再恨你干嘛。怎么你都在我的生命里好好的游玩了一番，还是愿你能好好考你的研究生吧。和你的现在的那位好好的吧。但愿是你对的那位。 还有一点，希望你以后能正面面对问题，不要总想着逃避，逃避虽然轻松，但解决不了问题。这是你的缺点，大学四年没帮你改正这个，真是抱歉。 有缘无份这个词我向来不信，不过自从你两次离开之后，我觉得或许这个形容咱两个再好不过了吧。本来就不是一路人吧或许。 既然决定好好放下这份感情，就要好好面对，你送的东西我会收纳好，你的照片我存了一个移动硬盘里面没有删，因为这些是我活过的证据。等生活过的坦然了，可能我的精神状态也就正常了吧。 回头看这些，我的问题好像更多一点啊。那就郑重地给你道个歉吧，对不住了。 最近我养了只布偶，本来想叫他十二，想了想，还是给他取名叫子咲了。","raw":"\n---\ntitle: Not fated\ndate: 2018-11-01 09:16:24\ntags: 理性的悲哀\ncategories: 感情\n---\n\n2018年5月24日，到今天五个多月了。想想这一路走来，还是要感谢你的陪伴吧。你写过两封信给我，关于你，我好像并没有写过什么吧。\n\n关于你的东西，拿起来了，终究要放下吧。我一直逃避着不去想这些也不是办法，那就让这段感情也分的清清楚楚吧，在今天中午午休的时候又想起来了你，想着下午不忙，那就整理一下思绪吧。\n\n从什么说起呢。\n\n高中厕所后面的对话？高考完的分开？还是大一时候的复合？\n\n我也不知道从何说起了，那个时间或许自己对感情并不了解吧，或许我现在对感情也并不理解了。\n\n只知道高中时间，逗你玩，趁着送你礼物偷亲你额头，在你十八岁成人礼的KTV里拥吻你，因为别人调戏你跑到别人班级讲台上向他们一个班宣战，和你写的纸条，看你害羞的表现，又或者过分到欺骗你想要获取你的关注，尽管不懂爱情吧，但真的那个时候很开心吧。\n\n高考完的分开，也是我第一次见识到你的冷酷与逃避吧。尽管可能当时的你比我成熟？比我想得多？但在我看来，你还是逃避了这些问题，或许这就是咱俩面对问题的处理方式不同吧。\n\n当时的自己真想一次性的恨透你，然后再也不去触碰你，无奈我这个人就这点太差劲了吧，敢爱不敢恨。又或者在我高中那个撒谎成性的骗子的脑子里面就没有爱和恨的分别呢。\n\n在那段分开的半年里，你说你又谈了一次恋爱，这是后来你告诉我的。我呢，也遇到一个挺喜欢的女孩，在那段时间里和她相处的也很开心，一起吃吃玩玩甚至和朋友一起入住一间公寓里。但是都没敢回应这份感情，因为内心对你的情感并没有完全放下。仔细想想，如果当时回应了这份感情是不是就不会像现在那么挣扎了。真是个冷笑话。\n\n后来和你复合了。是啊，讲实话，我当时感觉对那个女生的感情都要赶超你了，我也不知道为什么要去找你聊天，找你聊感情的问题。或者直观的讲，为什么要和你复合。可能内心深处还是对你的感情更深吧，也正是这个问题，让我冷酷的驳回了自己对那个女生的感情。这也是我大学四年来一个内疚的一件事，尽管毕业的时候对那个女生说明了这件事，她笑了笑，我也没希望得到她的谅解。或者说如果咱俩没分开的话，或许我那段话就一辈子不会和她讲了吧。\n\n至于咱俩的复合，我有时候也弄不清具体原因，因为我决定把我骗子的伪装撕开了去面对你吗？还是只是你当时的心软了一下罢了。那也是我第一次决定全身心的相信一个人，才自愿揭露所有谎言。\n\n接下来的时间里，首先要感谢你的真心相待，我不知道对于你来说，付出真心的过程容不容易，最起码对于我来说是个困难的过程，所以首先要感谢你的真心陪伴。\n\n在这段时间里，在这段从威海到昆明的异地时间里，也让我以后决定即使今后一个人过，也不会再去找一个异地的人陪伴。是啊，异地很难过，难过到让我一个那么执拗的，不信邪的人最好还是折服了下来。或者说咱俩熬过了异地，却没熬过异地带来的伤害。\n\n尽管如此，在一起的时间也是我二十一岁时光里最高兴的时间。因为我有了一个我完全信任的人，有这样的人存在，即使不在身边也会安心。\n\n第一个情人节，也是我平生第一次送花，本来打算从昆明这个花海城市里面买了寄过去，但是人家说鲜花到那都死了，便提前和你学校附近的花店联系好，然后一直内心脑补着你收到这九十九朵玫瑰的时候的表情。\n\n放假回家是能够共处的时间，也是在学校压抑了许久的感情释放的时间，以至于总想着黏在你身上，或者抱着你一天躺在床上也不会觉得乏味。没办法啊，像我这种闷性子，在异地的时间里能有东西打发想你的时间就尽量不去想你，因为想却见不到，碰不到的现实是最难过的。但是你后来告诉我，感觉我在学校的时候就很高冷，回家了就格外热情，又是开房又是什么的，怀疑我是不是只把你当成泄出性欲的工具，其实你没说这句话，但是我听到了这个意思，当时的我怔了一下，我这人有时候性欲是挺强的，但是我还不是那么没人性的人。其实在你有这个想法的时候，也就是当时在酒店里聊这些的时候，我就知道，这段感情要完了。至于你为什么会说到这些，我现在慢慢的也知道了。\n\n但是前些假期回家，基本上会陪着你去驾校学车，怕你一个人学车无聊，便喊着朋友去那打牌，等你学完把你送回家，或者吃个饭回家。其实想想个别时候，我表现出来的高冷的伪装，你还是可以看破的，只是可能后来不想去揭破了吧。驾校啊，也是我第一次见到你那弟弟和表哥的地方。再想想自己学车的时候，心里多少会抱怨吧。毕竟那段时间是咱俩感情危机。\n\n你曾经瞒着叔叔阿姨跑到昆明找我，等我考试，有一次我考试还迟到了，那一科刚好是概率论。一起去了西双版纳，那可是我大学四年唯一一次离开昆明出去旅游，想想大学应该多转转的。还在西双版纳吃了好吃的鸡爪，叫什么二中鸡爪，你特别爱吃，后台还专门找他家的店的联系方式，让那哥哥给你寄了过去，去了西双版纳也没怎么跑，只逛了中科院植物园，第二天你就感冒了，我也不知道附近哪有药店，还绕着那条街走了好远，买到了药，还想着买了些鸡爪能够给你涨点食欲。你还那你的头绳给我扎了个辫子，我害羞的从后面抱着你，你还对着镜子拍了照。现在慢慢的也敢于去想这些了吧，刚分开的时候这些总怕想了给自己找罪受。\n\n因为你学校在山东，所以我去你学习还是方便一些，回家的时候总是可以去转一下待几天陪你，陪你去那边的山上的庙里祈福，那边的藤椒米线我就没找到过第二家，你买的床单被罩本来打算和你送的那么多东西一起放起来再也不用了，但是想了想，既然要去放下，就要面对，只不过睡那个床单多少会想到你吧。\n\n是呀，你送了我很多东西，以至于分开的时候整理你的东西差点让我过不下去，过生日你写过两封信给我，第一次织围巾，虽然那个围巾我没有舍得围过，让我戒烟，却不忍心看我想抽烟的样子，还送了zippo给我。情侣装，腰带，钱包卡包，就连你的照片架我都得一一在前段时间里收起来。\n\n还有一次下着雪，你感冒了要打点滴，陪着你的时候也是我第一次见到叔叔阿姨，也是那一次叔叔送我会酒店的路上和我说的话，让我变了。是的，他让我意识到我必须要好好找工作，才能给你一个好的生活，他才会放心的把你交到我手上。人长大的过程，总会有些物质的部分。\n\n这些时光，是我人生中重要的一部分，我现在觉得我不会去刻意去忘记或者去逃避，他是我的一部分，尤为重要的一部分。\n\n至于咱俩的分开，我现在慢慢的也想到了一些，我是理智的人，你也是理智的人，这是最可悲的事。\n\n你考研的那段时间，可能就是根本的诱因吧。我没有陪到你，还有像你说的，那段时间你生病了，你发生了车祸，你发生了种种可能都没有告诉我，都一个人扛过去，觉得有时候一个人也过得下去。其实想想这是我的问题，也是你的问题吧，问题在我没有关注到你，问题在你要决定放下我在你心里的比重，其实在你有这个想法的时候，咱们两个的感情已经意味破了一半了吧。那是你对我或者对咱俩相处的那个样子已经失望到临界点了吧。至于这个失望，又肯定是我让你一点一点累积的吧。\n\n我问你为什么当时不给我说，让我去陪你，你回答我当时我当时也不对劲，也没打算告诉我给我增加压力，是呀，这就是两个理智的人的恋爱的悲哀吧。\n\n你的这种慢慢的比重减轻，也就是我内心不满的积累。\n\n现在说已经无所谓了吧，那段时间我告诉你我睡眠不好，还回家呆了一段时间，其实是被心理医生诊断到了一种名叫焦躁症和神经官能症的精神病和神经病。当时我自己都被吓到了，我得了精神病。我自己都接受不了的病。你可能体会不到那种痛苦，毕业，就业，工作，生活，恋爱，家庭的东西把我折磨到崩溃，焦躁症发作的时候我真的感觉我快要死了，快要活不下去了。晚上睡不着觉，白天精神恍惚，心里烦起来感觉浑身失了火。内心的不满和暴躁会被放大。你的影响更会被放大。但这些我也没敢和你说，回家，实习期间自己慢慢吃药，有时候陪你聊天的时候都感觉自己恍惚到不是自己了，晚上没办法陪到和你一起睡觉的点，要不脑袋像炸了一样，只能提前和你说晚安，本来相处最宝贵的时间也就又被剥夺了，因为什么呢，你在考研。还是那句话，这就是两个理智的人的悲哀吧。\n\n这也就是为什么前段时间因为你谈了新男朋友我暴躁的原因吧。内心总想着我为了你考研忍受精神折磨，你却自己一点不重视二次考研，还有心思恋爱。当时焦躁症就发作了，那天下午在公司直接坐不住了。现在想想，只是我一个人的臆想罢了吧。\n\n故事发展到你的考研失败，我工作稳定了。过年回到家，你考研不得意，精神不振，我呢，呵，精神病，还要强控制着自己情绪和你交流。当时在酒店里提到了分手，你否认了。其实那次之后，基本上这段感觉也就意味这结束了。这都是后话，当时并不知道会这样。\n\n当时呢，既然决定要继续，那我就要多做调整了，因为我工作稳定了，压力小了，你要二次考研，压力更大，我想在我只要好好陪着你二次考研就行了。但是事情并不如意，你虽然日常回信息，给微爱里面的小树浇水，但是你对我的感情已经变了，也就是你已经放低了我在你心里的比重，所以我找你，你回馈给我的是 你不知道给我讲什么。我想着我可以再忍忍，等你考研结束了或许就好了。最后还是我没坚持住吧，受不下去你无视的我爆发了，逼着你和我提了分手。原因？一是自己受够了冷落，二是对于那个阶段的你，这种“不知道说什么”的感情肯定不如不谈恋爱更加少分一些你考研的心。对两个人都好，你可以安心考验，我也不用天天热脸贴冷屁股，两个人都能把当时的情绪好好整理一下。对两个人人都好，对于会不会复合，我当时也只有了随缘，没有了坚持。想着等你考研完了，在好好聊一聊，能在一起就继续，不能在一起，就好好的给这段感情画个句号，正好那个时间也快到你生日了，送你本来打算送给你的神仙水。说到这个，可能我也有些变质了吧，工作了之后，开始会以物质的方面考虑问题。但我也没听你提到过相关的东西，不知道有没有引起你什么不适。\n\n然后就到前几天的大吵了吧。因为发现你谈了新男朋友，怎么说呢。确实不关我事。但是总觉得你骗了我，这也不怨你，因为你的角度，我就是和你分手了，两个人不相干了，而我的角度是，我和你分手了，但是没和你分的明明白白，我要等你考完研和你好好算清楚，结果你却在期间又找了男朋友，还是在考研期间，在我都不忍干预的考研期间。然后我的情绪就爆发了，想想也是很不应该，尽管第二天给你发了短信道歉。但多少心里还有不适，因为一切的始作俑者是我，你是不知情的，我为什么要以你是一个知情者的角度去斥责你呢。不过和你聊的时候，你好像误以为我在怀疑你，这点我自己确实有过一瞬间的怀疑，但被我打消了，因为如果连你我都怀疑的话，我大学四年是靠什么坚持下去这份感情的呢。但是你当时的狠心的语气确实惊讶了我，我没想到我一直让你性格硬一点，不要那么软，结果一硬起来竟然就是对着我。心第一次感受到了冰冷的感觉。\n\n是啊，这又是理性了吧。真是令人心烦的理性。可能两个人都不好受，还不如直接感性一点，直接祝福你今年考研两个人都再失败就好了，既然你没有一门心思地去考研，我还祝福你什么考研顺利？但还是理性赢了。\n\n人呢，撒的谎多了，精神容易出问题，这个我验证过了。\n\n想的东西多了，复杂了，把生活当成偶像剧来过了，精神也容易出问题，这个我也验证过了。\n\n所以我也只求接下来好好过自己的真实生活，不再撒谎，不要再讲什么善意的谎言，是谎言就是谎言。哪怕我接下来一个人活到我死。也不想再去做这些无谓的掩饰了，简单点真实点可能才是生活吧，要不活久了就不知道自己在哪个世界里了，这点要多谢谢你，要不我可能大学期间，这个精神病就发作了吧。多谢你可以让我真心以对吧。\n\n至于你呢，虽然这样荒诞的结束了。但是我这个性子就是这样，在第一次你走之后就认识到的那点，敢爱不敢恨。再害怕失去你，错过的终究要错过，只不过到真正结束两个人都没有见上一面。可能是这一辈的遗憾和笑柄吧。还想着等你考研完再和你面对面坐下来好好聊？可能我这一辈子也不做第二次这么蠢的事了。所以呢，还是祝福一下吧，不知道自己能活多久呢，活得短了可能你就是这一辈子里最重要的人之一了吧，再恨你干嘛。怎么你都在我的生命里好好的游玩了一番，还是愿你能好好考你的研究生吧。和你的现在的那位好好的吧。但愿是你对的那位。\n\n还有一点，希望你以后能正面面对问题，不要总想着逃避，逃避虽然轻松，但解决不了问题。这是你的缺点，大学四年没帮你改正这个，真是抱歉。\n\n有缘无份这个词我向来不信，不过自从你两次离开之后，我觉得或许这个形容咱两个再好不过了吧。本来就不是一路人吧或许。\n\n既然决定好好放下这份感情，就要好好面对，你送的东西我会收纳好，你的照片我存了一个移动硬盘里面没有删，因为这些是我活过的证据。等生活过的坦然了，可能我的精神状态也就正常了吧。\n\n回头看这些，我的问题好像更多一点啊。那就郑重地给你道个歉吧，对不住了。\n\n最近我养了只布偶，本来想叫他十二，想了想，还是给他取名叫子咲了。","content":"<p>2018年5月24日，到今天五个多月了。想想这一路走来，还是要感谢你的陪伴吧。你写过两封信给我，关于你，我好像并没有写过什么吧。</p>\n<p>关于你的东西，拿起来了，终究要放下吧。我一直逃避着不去想这些也不是办法，那就让这段感情也分的清清楚楚吧，在今天中午午休的时候又想起来了你，想着下午不忙，那就整理一下思绪吧。</p>\n<p>从什么说起呢。</p>\n<p>高中厕所后面的对话？高考完的分开？还是大一时候的复合？</p>\n<p>我也不知道从何说起了，那个时间或许自己对感情并不了解吧，或许我现在对感情也并不理解了。</p>\n<p>只知道高中时间，逗你玩，趁着送你礼物偷亲你额头，在你十八岁成人礼的KTV里拥吻你，因为别人调戏你跑到别人班级讲台上向他们一个班宣战，和你写的纸条，看你害羞的表现，又或者过分到欺骗你想要获取你的关注，尽管不懂爱情吧，但真的那个时候很开心吧。</p>\n<p>高考完的分开，也是我第一次见识到你的冷酷与逃避吧。尽管可能当时的你比我成熟？比我想得多？但在我看来，你还是逃避了这些问题，或许这就是咱俩面对问题的处理方式不同吧。</p>\n<p>当时的自己真想一次性的恨透你，然后再也不去触碰你，无奈我这个人就这点太差劲了吧，敢爱不敢恨。又或者在我高中那个撒谎成性的骗子的脑子里面就没有爱和恨的分别呢。</p>\n<p>在那段分开的半年里，你说你又谈了一次恋爱，这是后来你告诉我的。我呢，也遇到一个挺喜欢的女孩，在那段时间里和她相处的也很开心，一起吃吃玩玩甚至和朋友一起入住一间公寓里。但是都没敢回应这份感情，因为内心对你的情感并没有完全放下。仔细想想，如果当时回应了这份感情是不是就不会像现在那么挣扎了。真是个冷笑话。</p>\n<p>后来和你复合了。是啊，讲实话，我当时感觉对那个女生的感情都要赶超你了，我也不知道为什么要去找你聊天，找你聊感情的问题。或者直观的讲，为什么要和你复合。可能内心深处还是对你的感情更深吧，也正是这个问题，让我冷酷的驳回了自己对那个女生的感情。这也是我大学四年来一个内疚的一件事，尽管毕业的时候对那个女生说明了这件事，她笑了笑，我也没希望得到她的谅解。或者说如果咱俩没分开的话，或许我那段话就一辈子不会和她讲了吧。</p>\n<p>至于咱俩的复合，我有时候也弄不清具体原因，因为我决定把我骗子的伪装撕开了去面对你吗？还是只是你当时的心软了一下罢了。那也是我第一次决定全身心的相信一个人，才自愿揭露所有谎言。</p>\n<p>接下来的时间里，首先要感谢你的真心相待，我不知道对于你来说，付出真心的过程容不容易，最起码对于我来说是个困难的过程，所以首先要感谢你的真心陪伴。</p>\n<p>在这段时间里，在这段从威海到昆明的异地时间里，也让我以后决定即使今后一个人过，也不会再去找一个异地的人陪伴。是啊，异地很难过，难过到让我一个那么执拗的，不信邪的人最好还是折服了下来。或者说咱俩熬过了异地，却没熬过异地带来的伤害。</p>\n<p>尽管如此，在一起的时间也是我二十一岁时光里最高兴的时间。因为我有了一个我完全信任的人，有这样的人存在，即使不在身边也会安心。</p>\n<p>第一个情人节，也是我平生第一次送花，本来打算从昆明这个花海城市里面买了寄过去，但是人家说鲜花到那都死了，便提前和你学校附近的花店联系好，然后一直内心脑补着你收到这九十九朵玫瑰的时候的表情。</p>\n<p>放假回家是能够共处的时间，也是在学校压抑了许久的感情释放的时间，以至于总想着黏在你身上，或者抱着你一天躺在床上也不会觉得乏味。没办法啊，像我这种闷性子，在异地的时间里能有东西打发想你的时间就尽量不去想你，因为想却见不到，碰不到的现实是最难过的。但是你后来告诉我，感觉我在学校的时候就很高冷，回家了就格外热情，又是开房又是什么的，怀疑我是不是只把你当成泄出性欲的工具，其实你没说这句话，但是我听到了这个意思，当时的我怔了一下，我这人有时候性欲是挺强的，但是我还不是那么没人性的人。其实在你有这个想法的时候，也就是当时在酒店里聊这些的时候，我就知道，这段感情要完了。至于你为什么会说到这些，我现在慢慢的也知道了。</p>\n<p>但是前些假期回家，基本上会陪着你去驾校学车，怕你一个人学车无聊，便喊着朋友去那打牌，等你学完把你送回家，或者吃个饭回家。其实想想个别时候，我表现出来的高冷的伪装，你还是可以看破的，只是可能后来不想去揭破了吧。驾校啊，也是我第一次见到你那弟弟和表哥的地方。再想想自己学车的时候，心里多少会抱怨吧。毕竟那段时间是咱俩感情危机。</p>\n<p>你曾经瞒着叔叔阿姨跑到昆明找我，等我考试，有一次我考试还迟到了，那一科刚好是概率论。一起去了西双版纳，那可是我大学四年唯一一次离开昆明出去旅游，想想大学应该多转转的。还在西双版纳吃了好吃的鸡爪，叫什么二中鸡爪，你特别爱吃，后台还专门找他家的店的联系方式，让那哥哥给你寄了过去，去了西双版纳也没怎么跑，只逛了中科院植物园，第二天你就感冒了，我也不知道附近哪有药店，还绕着那条街走了好远，买到了药，还想着买了些鸡爪能够给你涨点食欲。你还那你的头绳给我扎了个辫子，我害羞的从后面抱着你，你还对着镜子拍了照。现在慢慢的也敢于去想这些了吧，刚分开的时候这些总怕想了给自己找罪受。</p>\n<p>因为你学校在山东，所以我去你学习还是方便一些，回家的时候总是可以去转一下待几天陪你，陪你去那边的山上的庙里祈福，那边的藤椒米线我就没找到过第二家，你买的床单被罩本来打算和你送的那么多东西一起放起来再也不用了，但是想了想，既然要去放下，就要面对，只不过睡那个床单多少会想到你吧。</p>\n<p>是呀，你送了我很多东西，以至于分开的时候整理你的东西差点让我过不下去，过生日你写过两封信给我，第一次织围巾，虽然那个围巾我没有舍得围过，让我戒烟，却不忍心看我想抽烟的样子，还送了zippo给我。情侣装，腰带，钱包卡包，就连你的照片架我都得一一在前段时间里收起来。</p>\n<p>还有一次下着雪，你感冒了要打点滴，陪着你的时候也是我第一次见到叔叔阿姨，也是那一次叔叔送我会酒店的路上和我说的话，让我变了。是的，他让我意识到我必须要好好找工作，才能给你一个好的生活，他才会放心的把你交到我手上。人长大的过程，总会有些物质的部分。</p>\n<p>这些时光，是我人生中重要的一部分，我现在觉得我不会去刻意去忘记或者去逃避，他是我的一部分，尤为重要的一部分。</p>\n<p>至于咱俩的分开，我现在慢慢的也想到了一些，我是理智的人，你也是理智的人，这是最可悲的事。</p>\n<p>你考研的那段时间，可能就是根本的诱因吧。我没有陪到你，还有像你说的，那段时间你生病了，你发生了车祸，你发生了种种可能都没有告诉我，都一个人扛过去，觉得有时候一个人也过得下去。其实想想这是我的问题，也是你的问题吧，问题在我没有关注到你，问题在你要决定放下我在你心里的比重，其实在你有这个想法的时候，咱们两个的感情已经意味破了一半了吧。那是你对我或者对咱俩相处的那个样子已经失望到临界点了吧。至于这个失望，又肯定是我让你一点一点累积的吧。</p>\n<p>我问你为什么当时不给我说，让我去陪你，你回答我当时我当时也不对劲，也没打算告诉我给我增加压力，是呀，这就是两个理智的人的恋爱的悲哀吧。</p>\n<p>你的这种慢慢的比重减轻，也就是我内心不满的积累。</p>\n<p>现在说已经无所谓了吧，那段时间我告诉你我睡眠不好，还回家呆了一段时间，其实是被心理医生诊断到了一种名叫焦躁症和神经官能症的精神病和神经病。当时我自己都被吓到了，我得了精神病。我自己都接受不了的病。你可能体会不到那种痛苦，毕业，就业，工作，生活，恋爱，家庭的东西把我折磨到崩溃，焦躁症发作的时候我真的感觉我快要死了，快要活不下去了。晚上睡不着觉，白天精神恍惚，心里烦起来感觉浑身失了火。内心的不满和暴躁会被放大。你的影响更会被放大。但这些我也没敢和你说，回家，实习期间自己慢慢吃药，有时候陪你聊天的时候都感觉自己恍惚到不是自己了，晚上没办法陪到和你一起睡觉的点，要不脑袋像炸了一样，只能提前和你说晚安，本来相处最宝贵的时间也就又被剥夺了，因为什么呢，你在考研。还是那句话，这就是两个理智的人的悲哀吧。</p>\n<p>这也就是为什么前段时间因为你谈了新男朋友我暴躁的原因吧。内心总想着我为了你考研忍受精神折磨，你却自己一点不重视二次考研，还有心思恋爱。当时焦躁症就发作了，那天下午在公司直接坐不住了。现在想想，只是我一个人的臆想罢了吧。</p>\n<p>故事发展到你的考研失败，我工作稳定了。过年回到家，你考研不得意，精神不振，我呢，呵，精神病，还要强控制着自己情绪和你交流。当时在酒店里提到了分手，你否认了。其实那次之后，基本上这段感觉也就意味这结束了。这都是后话，当时并不知道会这样。</p>\n<p>当时呢，既然决定要继续，那我就要多做调整了，因为我工作稳定了，压力小了，你要二次考研，压力更大，我想在我只要好好陪着你二次考研就行了。但是事情并不如意，你虽然日常回信息，给微爱里面的小树浇水，但是你对我的感情已经变了，也就是你已经放低了我在你心里的比重，所以我找你，你回馈给我的是 你不知道给我讲什么。我想着我可以再忍忍，等你考研结束了或许就好了。最后还是我没坚持住吧，受不下去你无视的我爆发了，逼着你和我提了分手。原因？一是自己受够了冷落，二是对于那个阶段的你，这种“不知道说什么”的感情肯定不如不谈恋爱更加少分一些你考研的心。对两个人都好，你可以安心考验，我也不用天天热脸贴冷屁股，两个人都能把当时的情绪好好整理一下。对两个人人都好，对于会不会复合，我当时也只有了随缘，没有了坚持。想着等你考研完了，在好好聊一聊，能在一起就继续，不能在一起，就好好的给这段感情画个句号，正好那个时间也快到你生日了，送你本来打算送给你的神仙水。说到这个，可能我也有些变质了吧，工作了之后，开始会以物质的方面考虑问题。但我也没听你提到过相关的东西，不知道有没有引起你什么不适。</p>\n<p>然后就到前几天的大吵了吧。因为发现你谈了新男朋友，怎么说呢。确实不关我事。但是总觉得你骗了我，这也不怨你，因为你的角度，我就是和你分手了，两个人不相干了，而我的角度是，我和你分手了，但是没和你分的明明白白，我要等你考完研和你好好算清楚，结果你却在期间又找了男朋友，还是在考研期间，在我都不忍干预的考研期间。然后我的情绪就爆发了，想想也是很不应该，尽管第二天给你发了短信道歉。但多少心里还有不适，因为一切的始作俑者是我，你是不知情的，我为什么要以你是一个知情者的角度去斥责你呢。不过和你聊的时候，你好像误以为我在怀疑你，这点我自己确实有过一瞬间的怀疑，但被我打消了，因为如果连你我都怀疑的话，我大学四年是靠什么坚持下去这份感情的呢。但是你当时的狠心的语气确实惊讶了我，我没想到我一直让你性格硬一点，不要那么软，结果一硬起来竟然就是对着我。心第一次感受到了冰冷的感觉。</p>\n<p>是啊，这又是理性了吧。真是令人心烦的理性。可能两个人都不好受，还不如直接感性一点，直接祝福你今年考研两个人都再失败就好了，既然你没有一门心思地去考研，我还祝福你什么考研顺利？但还是理性赢了。</p>\n<p>人呢，撒的谎多了，精神容易出问题，这个我验证过了。</p>\n<p>想的东西多了，复杂了，把生活当成偶像剧来过了，精神也容易出问题，这个我也验证过了。</p>\n<p>所以我也只求接下来好好过自己的真实生活，不再撒谎，不要再讲什么善意的谎言，是谎言就是谎言。哪怕我接下来一个人活到我死。也不想再去做这些无谓的掩饰了，简单点真实点可能才是生活吧，要不活久了就不知道自己在哪个世界里了，这点要多谢谢你，要不我可能大学期间，这个精神病就发作了吧。多谢你可以让我真心以对吧。</p>\n<p>至于你呢，虽然这样荒诞的结束了。但是我这个性子就是这样，在第一次你走之后就认识到的那点，敢爱不敢恨。再害怕失去你，错过的终究要错过，只不过到真正结束两个人都没有见上一面。可能是这一辈的遗憾和笑柄吧。还想着等你考研完再和你面对面坐下来好好聊？可能我这一辈子也不做第二次这么蠢的事了。所以呢，还是祝福一下吧，不知道自己能活多久呢，活得短了可能你就是这一辈子里最重要的人之一了吧，再恨你干嘛。怎么你都在我的生命里好好的游玩了一番，还是愿你能好好考你的研究生吧。和你的现在的那位好好的吧。但愿是你对的那位。</p>\n<p>还有一点，希望你以后能正面面对问题，不要总想着逃避，逃避虽然轻松，但解决不了问题。这是你的缺点，大学四年没帮你改正这个，真是抱歉。</p>\n<p>有缘无份这个词我向来不信，不过自从你两次离开之后，我觉得或许这个形容咱两个再好不过了吧。本来就不是一路人吧或许。</p>\n<p>既然决定好好放下这份感情，就要好好面对，你送的东西我会收纳好，你的照片我存了一个移动硬盘里面没有删，因为这些是我活过的证据。等生活过的坦然了，可能我的精神状态也就正常了吧。</p>\n<p>回头看这些，我的问题好像更多一点啊。那就郑重地给你道个歉吧，对不住了。</p>\n<p>最近我养了只布偶，本来想叫他十二，想了想，还是给他取名叫子咲了。</p>\n","slug":"别过","updated":"2018-11-01T08:29:14.924Z","comments":true,"link":"","permalink":"http://yoursite.com/2018/11/01/别过/","excerpt":"","categories":[{"name":"感情","slug":"感情","permalink":"http://yoursite.com/categories/感情/"}],"tags":[{"name":"理性的悲哀","slug":"理性的悲哀","permalink":"http://yoursite.com/tags/理性的悲哀/"}]},{"title":"内心翻涌","date":"2018-10-08T07:16:24.000Z","path":"2018/10/08/内心澎湃的一首歌/","text":"Megola box 这个是当时在看Megola box的时候听到的一首BGM，当时真的内心燃炸，太有血性了。","raw":"\n---\ntitle: 内心翻涌\ndate: 2018-10-08 15:16:24\ntags: 激扬\ncategories: 音乐\n---\n\n## Megola box\n\n\n<br>\n<br>\n\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=3&id=1368935050&auto=1&height=66\"></iframe>\n\n\n<br>\n<br>\n这个是当时在看Megola box的时候听到的一首BGM，当时真的内心燃炸，太有血性了。","content":"<h2 id=\"Megola-box\"><a href=\"#Megola-box\" class=\"headerlink\" title=\"Megola box\"></a>Megola box</h2><p><br><br><br></p>\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=\"330\" height=\"86\" src=\"//music.163.com/outchain/player?type=3&id=1368935050&auto=1&height=66\"></iframe>\n\n\n<p><br><br><br><br>这个是当时在看Megola box的时候听到的一首BGM，当时真的内心燃炸，太有血性了。</p>\n","slug":"内心澎湃的一首歌","updated":"2018-11-01T08:13:34.685Z","comments":true,"link":"","permalink":"http://yoursite.com/2018/10/08/内心澎湃的一首歌/","excerpt":"","categories":[{"name":"音乐","slug":"音乐","permalink":"http://yoursite.com/categories/音乐/"}],"tags":[{"name":"激扬","slug":"激扬","permalink":"http://yoursite.com/tags/激扬/"}]},{"title":"稚嫩","date":"2018-10-08T01:16:24.000Z","path":"2018/10/08/团日活动视频/","text":"还真是稚嫩。 第二次团日活动视频 记得这还是当以的时候，第二次团日活动视频，就拿到了全校的第一名，当时被同学们当时大神一样看待，现在想想，视频的难度并不出众，但是作为回忆，真的是个不错的选择。","raw":"\n---\ntitle: 稚嫩\ndate: 2018-10-08 09:16:24\ntags: 大学\ncategories: 生活\n---\n\n## 还真是稚嫩。\n\n<br>\n\n### 第二次团日活动视频\n<br>\n<br>\n\n<iframe width=\"560\" height=\"315\" src=\"https://v.youku.com/v_show/id_XODI2NzQ4NjEy.html?spm=a2hzp.8244740.0.0\" frameborder=\"0\" allowfullscreen></iframe>\n\n<br>\n<br>\n记得这还是当以的时候，第二次团日活动视频，就拿到了全校的第一名，当时被同学们当时大神一样看待，现在想想，视频的难度并不出众，但是作为回忆，真的是个不错的选择。","content":"<h2 id=\"还真是稚嫩。\"><a href=\"#还真是稚嫩。\" class=\"headerlink\" title=\"还真是稚嫩。\"></a>还真是稚嫩。</h2><p><br></p>\n<h3 id=\"第二次团日活动视频\"><a href=\"#第二次团日活动视频\" class=\"headerlink\" title=\"第二次团日活动视频\"></a>第二次团日活动视频</h3><p><br><br><br></p>\n<iframe width=\"560\" height=\"315\" src=\"https://v.youku.com/v_show/id_XODI2NzQ4NjEy.html?spm=a2hzp.8244740.0.0\" frameborder=\"0\" allowfullscreen></iframe>\n\n<p><br><br><br><br>记得这还是当以的时候，第二次团日活动视频，就拿到了全校的第一名，当时被同学们当时大神一样看待，现在想想，视频的难度并不出众，但是作为回忆，真的是个不错的选择。</p>\n","slug":"团日活动视频","updated":"2018-11-01T08:12:51.475Z","comments":true,"link":"","permalink":"http://yoursite.com/2018/10/08/团日活动视频/","excerpt":"","categories":[{"name":"生活","slug":"生活","permalink":"http://yoursite.com/categories/生活/"}],"tags":[{"name":"大学","slug":"大学","permalink":"http://yoursite.com/tags/大学/"}]},{"title":"OffLine Remote","date":"2018-09-24T07:16:24.000Z","path":"2018/09/24/offlineremote/","text":"目录 为什么做离线督察？ 怎么做离线督察？ 应用流程 为什么做离线督察？ 离线督察优点： 不接后台，摆脱网络问题a.是否将内网映射到外网 b.是否需要挂VPN 响应速度问题报脱了等待后台相应的问题，释放等待时间，一键响应。 安全问题摆脱信息传输安全问题，不用担心信息被抓走。 离线督察优点： 数据传输数据传输只能靠物理拷贝。增加了数据传输的不方便性。 数据管理需要后台操作与存储的问题现在则需要前端来处理，还需要数据管理的部分。 怎么做离线督察？1.设备验证与用户管理 在线的设备注册可以请求后台 公钥可以请求获取 登录可以通过公钥加密后请求来实现 那离线呢？ 这就引发了我们对于这个制作的思路,从下面就是整个设计思路。 一个证书对应一个设备，一个用户，唯有对应的一台设备以及对应的一个用户才能进行通过。 用户本地可以更改密码，但是密码找回只能重新联系管理员。具体流程如下： 2.数据管理因为离线版本无后台管理数据，设备本地的资源管理器则成为了应用数据展示的UI界面。那么这个界面的信息的可阅读性，也就制约着信息的选择与使用。这些文件数据： 在应用内进行读取。 在应用外直观展示。 如何提高这个界面的信息阅读性，对于文件资源管理器，无非就是数据分级结构与文件命名。文件夹的标识则成了重要的一部分，既要展示出自己不同的地方，又要减少程序加载的资源损耗。所以本地的资源目录格式便设计成了以下结构： 3.配置文件的存放与更新 获取 相比在线的可以实时获取图斑信息，离线只能读取本地的配置文件，且配置文件中只有图斑的名字，图斑的督察情况详情需要我们通过遍历文件来获取。由于数据复杂，在应用运行期间只会遍历获取一次。避免更新数据时卡顿。 刷新 由于图斑的督察会实时变更本地文件与文件夹信息，所以之前遍历的所有数据随时都在变更。但我们并不会再重新去遍历数据。则需要程序模拟出存储逻辑过程，准确更改本地信息，不会再去遍历本地数据。且避免无效路径。 4.图版上传 图版上传？一听这个名字就知道是在线功能，那么离线怎么实现呢？图斑锁定！除了和图版上传同样验证是否完成了多媒体和督察信息。 将上传图版变更为锁定图版 将批量上传变更为批量锁定 选择锁定图版之后无法在对多媒体文档以及督察信息进行编辑，只能进行查看。 待用户完全督察完成后，进行批量拷贝。 应用流程 结语&emsp;&emsp;从数据管理方面，Android作为前端设备，摒弃了后台独立开发的话，难免在数据管理与数据处理上感到吃力，放弃了信息传输的话，应用只能是个工具，不再是个平台。 &emsp;&emsp;从数据更新方面，实时的更新数据只能单方面的去模拟数据处理流程，对于应用外的干预，无法实时发现与做出相应。 &emsp;&emsp;从开发经验方面，通过这样的应用开发，让我了解并熟悉了移动督察的实质，操作逻辑与应用流程。对接下来的开发有着莫大的帮助。 &emsp;","raw":"---\ntitle: OffLine Remote\ndate: 2018-09-24 15:16:24\ntags: 项目\ncategories: 工作\n---\n<header> \n<td bgcolor=#0099ff>   \n<img src=\"https://i.imgur.com/7FykwPD.jpg\"  align=\"center\"/>\n   \n\n</td>\n\n</header>\n\n<br>\n\n* <font size=\"8\" face=\"黑体\" color=#51aa51 >**目录**</font>\n\n\n\n1. <font size=\"5\" face=\"黑体\" color=#000000 >**为什么做离线督察？**</font><br>\n\n\n2. <font size=\"5\" face=\"黑体\" color=#000000 >**怎么做离线督察？**</font><br>\n\n\n3. <font size=\"5\" face=\"黑体\" color=#000000 >**应用流程**</font><br>\n\n<hr>\n<br>\n\n\n## <font size=\"6\" face=\"黑体\" color=#ffb022 >**为什么**</font><font size=\"6\" face=\"黑体\" color=#005432 >**做离线督察？**</font>\n\n> 离线督察优点：\n\n\n\n1. 不接后台，摆脱网络问题<br>\na.是否将内网映射到外网   b.是否需要挂VPN\n<br>\n\n\n2. 响应速度问题<br>\n报脱了等待后台相应的问题，释放等待时间，一键响应。\n<br>\n\n\n3. 安全问题<br>\n摆脱信息传输安全问题，不用担心信息被抓走。\n<br>\n\n> 离线督察优点：\n\n\n1. 数据传输<br>\n数据传输只能靠物理拷贝。增加了数据传输的不方便性。\n<br>\n\n\n2. 数据管理<br>\n需要后台操作与存储的问题现在则需要前端来处理，还需要数据管理的部分。\n<br>\n\n\n\n\n\n\n\n\n<hr>\n<br>\n\n\n## <font size=\"6\" face=\"黑体\" color=#ffb022 >**怎么**</font><font size=\"6\" face=\"黑体\" color=#005432 >**做离线督察？**</font>\n\n\n###  1.<font size=\"5\" face=\"黑体\"  color=#ff4444>**设备验证与用户管理**</font><br>\n\n> 在线的设备注册可以请求后台\n\n> 公钥可以请求获取\n\n> 登录可以通过公钥加密后请求来实现\n\n <br>\n那离线呢？\t这就引发了我们对于这个制作的思路,从下面就是整个设计思路。\n\n<br>\n\n<img src=\"https://i.imgur.com/GrXqZsw.png\"  align=\"center\"/>\n\n<br>\n\n一个证书对应一个设备，一个用户，唯有对应的一台设备以及对应的一个用户才能进行通过。\n\n用户本地可以更改密码，但是密码找回只能重新联系管理员。具体流程如下：\n\n<br>\n\n<img src=\"https://i.imgur.com/UBA3iWH.jpg\"  align=\"center\"/>\n    \n<br>\n\n###   2.<font size=\"5\" face=\"黑体\">**数据管理**</font><br>\n<br>\n因为离线版本无后台管理数据，设备本地的资源管理器则成为了应用数据展示的UI界面。\n<br>\n<br>\n那么这个界面的信息的可阅读性，也就制约着信息的选择与使用。\n<br>\n<br>\n这些文件数据：\n\n>在应用内进行读取。\n\n\n>在应用外直观展示。\n\n\n如何提高这个界面的信息阅读性，对于文件资源管理器，无非就是数据分级结构与文件命名。\n<br>\n<br>\n文件夹的标识则成了重要的一部分，既要展示出自己不同的地方，又要减少程序加载的资源损耗。\n<br>\n<br>\n所以本地的资源目录格式便设计成了以下结构：\n<br>\n<br>\n\n<img src=\"https://i.imgur.com/fK2GUrD.jpg\"  align=\"center\"/>\n\n\n<br>\n\n\n\t\t\n\n###  3.<font size=\"5\" face=\"黑体\">**配置文件的存放与更新**</font><br>\n\n>   获取\n\n<br>\n相比在线的可以实时获取图斑信息，离线只能读取本地的配置文件，且配置文件中只有图斑的名字，图斑的督察情况详情需要我们通过遍历文件来获取。<br>\n由于数据复杂，在应用运行期间<font color=\"ff5555\">只会遍历获取一次</font>。避免更新数据时卡顿。\n\n\t \t\t\t\n\n\n<br>\n>   刷新\n\n<br>\n由于图斑的督察会<font color=\"ff5555\">实时变更本地文件与文件夹信息</font>，所以之前遍历的所有数据随时都在变更。但我们并不会再重新去遍历数据。<br>\n则需要程序<font color=\"ff5555\">模拟出存储逻辑过程</font>，准确更改本地信息，不会再去遍历本地数据。且避免无效路径。\n\n\n\n<br>\n\n\n              \n\n###  4.<font size=\"5\" face=\"黑体\">**图版上传**</font>\n<br>\n\n\n图版上传？一听这个名字就知道是在线功能，那么离线怎么实现呢？<br><br>\n图斑锁定！除了和图版上传同样验证是否完成了多媒体和督察信息。\n\n>将上传图版变更为锁定图版\n\n\n>将批量上传变更为批量锁定\n\n\n\n选择锁定图版之后无法在对多媒体文档\n以及督察信息进行编辑，只能进行查看。\n\n待用户完全督察完成后，进行批量拷贝。\n\n\n   \n\n\n## <font size=\"6\" face=\"黑体\" color=#005432 >**应用流程**</font>\n\n<br>\n<img src=\"https://i.imgur.com/DIfAzrU.jpg\"  align=\"center\"/>\n\n\n<hr>\n<br>\n\n\n## <font size=\"6\" face=\"黑体\" color=#005432 >**结语**</font>\n\n\n&emsp;&emsp;从数据管理方面，Android作为前端设备，摒弃了后台独立开发的话，难免在数据管理与数据处理上感到吃力，放弃了信息传输的话，应用只能是个工具，不再是个平台。\n<Br>\n&emsp;&emsp;从数据更新方面，实时的更新数据只能单方面的去模拟数据处理流程，对于应用外的干预，无法实时发现与做出相应。\n<Br>\n&emsp;&emsp;从开发经验方面，通过这样的应用开发，让我了解并熟悉了移动督察的实质，操作逻辑与应用流程。对接下来的开发有着莫大的帮助。\n\n\n<br>\n\n<image src=\"http://www.dist.com.cn/templates/cn/images/logo.png\" align=\"right\">\n<br>&emsp;\n\n<br>\n<hr>\n\n\n","content":"<header><br><td bgcolor=\"#0099ff\"><br><img src=\"https://i.imgur.com/7FykwPD.jpg\" align=\"center\"><br><br><br></td><br><br></header>\n\n<p><br></p>\n<ul>\n<li><font size=\"8\" face=\"黑体\" color=\"#51aa51\"><strong>目录</strong></font>\n\n\n\n</li>\n</ul>\n<ol>\n<li><font size=\"5\" face=\"黑体\" color=\"#000000\"><strong>为什么做离线督察？</strong></font><br></li>\n</ol>\n<ol start=\"2\">\n<li><font size=\"5\" face=\"黑体\" color=\"#000000\"><strong>怎么做离线督察？</strong></font><br></li>\n</ol>\n<ol start=\"3\">\n<li><font size=\"5\" face=\"黑体\" color=\"#000000\"><strong>应用流程</strong></font><br></li>\n</ol>\n<p><hr><br><br></p>\n<h2 id=\"为什么做离线督察？\"><a href=\"#为什么做离线督察？\" class=\"headerlink\" title=\"为什么做离线督察？\"></a><font size=\"6\" face=\"黑体\" color=\"#ffb022\"><strong>为什么</strong></font><font size=\"6\" face=\"黑体\" color=\"#005432\"><strong>做离线督察？</strong></font></h2><blockquote>\n<p>离线督察优点：</p>\n</blockquote>\n<ol>\n<li>不接后台，摆脱网络问题<br><br>a.是否将内网映射到外网   b.是否需要挂VPN<br><br></li>\n</ol>\n<ol start=\"2\">\n<li>响应速度问题<br><br>报脱了等待后台相应的问题，释放等待时间，一键响应。<br><br></li>\n</ol>\n<ol start=\"3\">\n<li>安全问题<br><br>摆脱信息传输安全问题，不用担心信息被抓走。<br><br></li>\n</ol>\n<blockquote>\n<p>离线督察优点：</p>\n</blockquote>\n<ol>\n<li>数据传输<br><br>数据传输只能靠物理拷贝。增加了数据传输的不方便性。<br><br></li>\n</ol>\n<ol start=\"2\">\n<li>数据管理<br><br>需要后台操作与存储的问题现在则需要前端来处理，还需要数据管理的部分。<br><br></li>\n</ol>\n<p><hr><br><br></p>\n<h2 id=\"怎么做离线督察？\"><a href=\"#怎么做离线督察？\" class=\"headerlink\" title=\"怎么做离线督察？\"></a><font size=\"6\" face=\"黑体\" color=\"#ffb022\"><strong>怎么</strong></font><font size=\"6\" face=\"黑体\" color=\"#005432\"><strong>做离线督察？</strong></font></h2><h3 id=\"1-设备验证与用户管理\"><a href=\"#1-设备验证与用户管理\" class=\"headerlink\" title=\"1.设备验证与用户管理\"></a>1.<font size=\"5\" face=\"黑体\" color=\"#ff4444\"><strong>设备验证与用户管理</strong></font><br></h3><blockquote>\n<p>在线的设备注册可以请求后台</p>\n</blockquote>\n<blockquote>\n<p>公钥可以请求获取</p>\n</blockquote>\n<blockquote>\n<p>登录可以通过公钥加密后请求来实现</p>\n</blockquote>\n<p> <br><br>那离线呢？    这就引发了我们对于这个制作的思路,从下面就是整个设计思路。</p>\n<p><br></p>\n<p><img src=\"https://i.imgur.com/GrXqZsw.png\" align=\"center\"></p>\n<p><br></p>\n<p>一个证书对应一个设备，一个用户，唯有对应的一台设备以及对应的一个用户才能进行通过。</p>\n<p>用户本地可以更改密码，但是密码找回只能重新联系管理员。具体流程如下：</p>\n<p><br></p>\n<p><img src=\"https://i.imgur.com/UBA3iWH.jpg\" align=\"center\"></p>\n<p><br></p>\n<h3 id=\"2-数据管理\"><a href=\"#2-数据管理\" class=\"headerlink\" title=\"2.数据管理\"></a>2.<font size=\"5\" face=\"黑体\"><strong>数据管理</strong></font><br></h3><p><br><br>因为离线版本无后台管理数据，设备本地的资源管理器则成为了应用数据展示的UI界面。<br><br><br><br><br>那么这个界面的信息的可阅读性，也就制约着信息的选择与使用。<br><br><br><br><br>这些文件数据：</p>\n<blockquote>\n<p>在应用内进行读取。</p>\n</blockquote>\n<blockquote>\n<p>在应用外直观展示。</p>\n</blockquote>\n<p>如何提高这个界面的信息阅读性，对于文件资源管理器，无非就是数据分级结构与文件命名。<br><br><br><br><br>文件夹的标识则成了重要的一部分，既要展示出自己不同的地方，又要减少程序加载的资源损耗。<br><br><br><br><br>所以本地的资源目录格式便设计成了以下结构：<br><br><br><br></p>\n<p><img src=\"https://i.imgur.com/fK2GUrD.jpg\" align=\"center\"></p>\n<p><br></p>\n<h3 id=\"3-配置文件的存放与更新\"><a href=\"#3-配置文件的存放与更新\" class=\"headerlink\" title=\"3.配置文件的存放与更新\"></a>3.<font size=\"5\" face=\"黑体\"><strong>配置文件的存放与更新</strong></font><br></h3><blockquote>\n<p>  获取</p>\n</blockquote>\n<p><br><br>相比在线的可以实时获取图斑信息，离线只能读取本地的配置文件，且配置文件中只有图斑的名字，图斑的督察情况详情需要我们通过遍历文件来获取。<br><br>由于数据复杂，在应用运行期间<font color=\"ff5555\">只会遍历获取一次</font>。避免更新数据时卡顿。</p>\n<p><br></p>\n<blockquote>\n<p>  刷新</p>\n</blockquote>\n<p><br><br>由于图斑的督察会<font color=\"ff5555\">实时变更本地文件与文件夹信息</font>，所以之前遍历的所有数据随时都在变更。但我们并不会再重新去遍历数据。<br><br>则需要程序<font color=\"ff5555\">模拟出存储逻辑过程</font>，准确更改本地信息，不会再去遍历本地数据。且避免无效路径。</p>\n<p><br></p>\n<h3 id=\"4-图版上传\"><a href=\"#4-图版上传\" class=\"headerlink\" title=\"4.图版上传\"></a>4.<font size=\"5\" face=\"黑体\"><strong>图版上传</strong></font></h3><p><br></p>\n<p>图版上传？一听这个名字就知道是在线功能，那么离线怎么实现呢？<br><br><br>图斑锁定！除了和图版上传同样验证是否完成了多媒体和督察信息。</p>\n<blockquote>\n<p>将上传图版变更为锁定图版</p>\n</blockquote>\n<blockquote>\n<p>将批量上传变更为批量锁定</p>\n</blockquote>\n<p>选择锁定图版之后无法在对多媒体文档<br>以及督察信息进行编辑，只能进行查看。</p>\n<p>待用户完全督察完成后，进行批量拷贝。</p>\n<h2 id=\"应用流程\"><a href=\"#应用流程\" class=\"headerlink\" title=\"应用流程\"></a><font size=\"6\" face=\"黑体\" color=\"#005432\"><strong>应用流程</strong></font></h2><p><br><br><img src=\"https://i.imgur.com/DIfAzrU.jpg\" align=\"center\"></p>\n<p><hr><br><br></p>\n<h2 id=\"结语\"><a href=\"#结语\" class=\"headerlink\" title=\"结语\"></a><font size=\"6\" face=\"黑体\" color=\"#005432\"><strong>结语</strong></font></h2><p>&emsp;&emsp;从数据管理方面，Android作为前端设备，摒弃了后台独立开发的话，难免在数据管理与数据处理上感到吃力，放弃了信息传输的话，应用只能是个工具，不再是个平台。</p>\n<p><br><br>&emsp;&emsp;从数据更新方面，实时的更新数据只能单方面的去模拟数据处理流程，对于应用外的干预，无法实时发现与做出相应。</p>\n<p><br><br>&emsp;&emsp;从开发经验方面，通过这样的应用开发，让我了解并熟悉了移动督察的实质，操作逻辑与应用流程。对接下来的开发有着莫大的帮助。</p>\n<p><br></p>\n<p><image src=\"http://www.dist.com.cn/templates/cn/images/logo.png\" align=\"right\"><br><br>&emsp;</image></p>\n<p><br></p>\n<hr>\n\n\n","slug":"offlineremote","updated":"2018-11-01T08:16:55.422Z","comments":true,"link":"","permalink":"http://yoursite.com/2018/09/24/offlineremote/","excerpt":"","categories":[{"name":"工作","slug":"工作","permalink":"http://yoursite.com/categories/工作/"}],"tags":[{"name":"项目","slug":"项目","permalink":"http://yoursite.com/tags/项目/"}]},{"title":"Land AnaLysis","date":"2018-08-13T01:36:24.000Z","path":"2018/08/13/landanalysis/","text":"移动用地分析功能 简介用地分析是指在对地区各自然要素进行综合分析研究的基础上，按照城市规划和建设要求、用地整备工程技术的可能性和经济性，对城市规划用地进行适用性分析评定，以划出城市用地的不同等级。另外用于查清村和农、林、牧、渔场，居民点及其以外的独立工矿企事业单位土地权属界线和村以上各级行政界线，查清各类用地面积、分布和利用状况。在本文中，用地分析主要实现为对所选中区域进行土地类别、面积和分布的识别与判断，计算其中各个层级占其父级的百分比以及面积情况。 实现逻辑略析 可视化与相关功能操作窗口的基本实现 加载功能基础的地图底图与分析操作图层 分析区域的选择并获取当前图形 离线调用FeatureQuery（在线调用QueryTask）进行要素查询与过滤 获得结果FeatureResult，从中获取Geometry（并非与绘制图形做过交叉处理的Geometry）与Attribute 图形切割与面积计算 通过GraphicLayer进行图形展示以及图形条组与相应控件Item绑定 重要部分代码实现1.分析区域选择//通过多点集合绘制几何图形 polygon.lineTo(currentPoint); currentGraphic = new Graphic(polygon, symbol); drawLayer.updateGraphic(currentGraphicIndex,currentGraphic); pointGraphic=new Graphic(multiPoint,pointSymbol); drawLayer.updateGraphic(pointGraphicIndex,pointGraphic); multiPoint.add(currentPoint); if(lastGraphicIndex!=-1){ drawLayer.removeGraphic(lastGraphicIndex); } lastGraphic=new Graphic(currentPoint,lastSymbol); lastGraphicIndex=drawLayer.addGraphic(lastGraphic); 2.地图查询 离线查询 离线查询通过初始化一个QueryParameter并设置其参数，调用FeatureLayer对象的QueryFeature方法进行查询，拿到查询结果的Geometry与Attribute。 QueryParameters queryParams=new QueryParameters(); //设置区域 if (isALL) { queryParams.setGeometry(mapView_main.getExtent()); }else { Polygon queryPolygon=measureManager.getpolygon(); queryParams.setGeometry(queryPolygon); } //设置过滤字段 queryParams.setOutFields(new String[]{&quot;*&quot;}); landAnalysisResultInfos=new ArrayList&lt;&gt;(); List&lt;LandAnalysisResultInfo&gt; analysisResultInfos=new ArrayList&lt;&gt;(); Future&lt;FeatureResult&gt; resultFuture=null; FeatureResult featureResult=null; FeatureLayer featureLayer=(FeatureLayer)layer; resultFuture=featureLayer.getFeatureTable().queryFeatures(queryParams,callbackListener); try { //获取结果 featureResult=resultFuture.get(); } catch (InterruptedException e) { e.printStackTrace(); } catch (ExecutionException e) { e.printStackTrace(); } if (featureResult!=null&amp;&amp;featureResult.featureCount()&gt;0) { Iterator it = featureResult.iterator(); while (it.hasNext()){ GeodatabaseFeature geodatabaseFeature= (GeodatabaseFeature) it.next(); Geometry geometry=geodatabaseFeature.getGeometry(); &lt;String, Object&gt; featureMap=geodatabaseFeature.getAttributes(); if(geometry!=null){ //进行图形处理 } if (featureMap!=null&amp;&amp;featureMap.size()&gt;0) { //进行内容详情提取处理 } } 在线查询 在线查询通过初始化一个QueryParameter并设置其参数，然后通过在线图层的URL初始化一个QueryTask，通过其对象的execute方法拿到查询结果的Geometry与Attribute。 QueryParameters queryParams=new QueryParameters(); Polygon Querypolygon=measureManager.getpolygon(); queryParams.setGeometry(Querypolygon); landAnalysisResultInfos=new ArrayList&lt;&gt;(); queryParams.setOutFields(new String[]{&quot;*&quot;}); List&lt;LandAnalysisResultInfo&gt; analysisResultInfos=new ArrayList&lt;&gt;(); Future&lt;FeatureResult&gt; resultFuture=null; FeatureResult featureResult=null; ArcGISDynamicMapServiceLayer featureLayer=(ArcGISDynamicMapServiceLayer)layer; QueryTask queryTask=new QueryTask(featureLayer.getQueryUrl(0)); resultFuture=queryTask.execute(queryParams, callbackListener); try { featureResult=resultFuture.get(); } catch (InterruptedException e) { e.printStackTrace(); } catch (ExecutionException e) { e.printStackTrace(); } if (featureResult!=null&amp;&amp;featureResult.featureCount()&gt;0) { for (Object element : featureResult) { if (element instanceof Feature) { Feature f = (Feature) element; Geometry geometry=f.getGeometry(); Map&lt;String, Object&gt; featureMap=f.getAttributes(); if(geometry!=null){ //进行图形处理 } if (featureMap!=null&amp;&amp;featureMap.size()&gt;0) { //进行内容详情提取处理 } } } } 3.图形交叉处理 通过调用GeometeyEngine.intersect()方法获取。 Geometry geometry = GeometryEngine.intersect(geometry,measureManager.getpolygon(),mapView_main.getSpatialReference()); 4.面积计算 由于获取的Geometry的面积与其父Geometry的面积均为调用Geometry对象的calculateArea2D()方法，并非实际面积。所以我们需要通过Attribute获得的实际面积计算切割Geometry与其父Geometry的实际面积，并计算其百分比。 /** *通过在地图上的Area大小计算百分比与实际面积 * * @param landResourceInfos 分析结果的数组 成员： {@link LandAnalysisResultInfo} * @return 一个结果的数组 变更了参数数组中成员的属性 */ public static List&lt;LandAnalysisResultInfo&gt; getLandPercentValue(List&lt;LandAnalysisResultInfo&gt; landResourceInfos){ /*计算实际面积 */ double MUM=0; for (LandAnalysisResultInfo landResourceInfo : landResourceInfos) { if (landResourceInfo.getYDMJ()==null) { landResourceInfos.remove(landResourceInfo); continue; } Double visualArea=landResourceInfo.getGeometry().calculateArea2D(); Double visualParentArea=landResourceInfo.getParentGeometry().calculateArea2D(); Double realArea=landResourceInfo.getYDMJ()/visualParentArea*visualArea; landResourceInfo.setYDMJ(realArea); //累计求和 MUM=MUM+landResourceInfo.getYDMJ(); } /*分别计算百分比*/ for (LandAnalysisResultInfo landResourceInfo : landResourceInfos) { landResourceInfo.setPercentValue(String.valueOf(landResourceInfo.getYDMJ()/MUM*100)); } return landResourceInfos; } 5.图形展示 由于本次使用为列表显示，故图形展示在点击子Item的时候进行Geometry的绘制与添加。 /** * 结果列表点击效果 */ private AdapterView.OnItemClickListener resultListOnItemClickListener =new AdapterView.OnItemClickListener() { @Override public void onItemClick(AdapterView&lt;?&gt; parent, View view, int position, long id) { resultDrawerLayer.removeAll(); resultDrawerLayer.addGraphic(new Graphic(landAnalysisResultInfos.get(position).getGeometry(), MapViewTapTool.getLabelSymbol(MainMapActivity.this,Geometry.Type.POLYGON, Color.BLUE))); resultDrawerLayer.addGraphic(new Graphic(landAnalysisResultInfos.get(position).getParentGeometry(),MapViewTapTool.getLabelSymbol(MainMapActivity.this,Geometry.Type.POLYLINE, Color.BLACK))); Envelope tempEnvelope = new Envelope(); landAnalysisResultInfos.get(position).getParentGeometry().queryEnvelope(tempEnvelope); Point tempPoint = tEnvelope.getCenter(); mapView_main.centerAt(tempPoint,true); } }; 结语&emsp;&emsp;用地分析功能的开发，既减少了用户查看地图计算面积的时间，提高了地图的可阅读性。让用户通过移动设备简单的操作即可获取选取区域中各类型的板块内容与面积，并通过绘制图层让用户在地图上更直观的看清板块对象。 相关关键代码查看 &emsp;","raw":"---\ntitle: Land AnaLysis\ndate: 2018-08-13 09:36:24\ntags: Android\ncategories: 工作\n---\n<header> \n<td bgcolor=#0099ff>   \n\n   <center><table><tr><td bgcolor=#333333><font size =7 face=\"黑体\" color=#ffffff>**移动用地分析功能**</td></tr></table></center>\n   \n\n</td>\n</header>\n\n\n\n## <font size=\"6\" face=\"黑体\" color=#005432 >**简介**</font>\n\n\n\n<font size=\"4\">用地分析是指在对地区各自然要素进行综合分析研究的基础上，按照城市规划和建设要求、用地整备工程技术的可能性和经济性，对城市规划用地进行适用性分析评定，以划出城市用地的不同等级。</font>\n<br>\n<font size=\"4\">另外用于查清村和农、林、牧、渔场，居民点及其以外的独立工矿企事业单位土地权属界线和村以上各级行政界线，查清各类用地面积、分布和利用状况。</font>\n<br>\n<font color=#664499 size=\"4\">在本文中，用地分析主要实现为对所选中区域进行土地类别、面积和分布的识别与判断，计算其中各个层级占其父级的百分比以及面积情况。</font>\n\n\n<hr>\n\n<br>\n\n\n## <font size=\"6\" face=\"黑体\" color=#005432 >**实现逻辑略析**</font>\n\n\n1. 可视化与相关功能操作窗口的基本实现<br>\n\n\n2. 加载功能基础的地图底图与分析操作图层<br>\n\n\n3. 分析区域的选择并获取当前图形<br>\n\n\n4. <font color=#664499>离线调用FeatureQuery（在线调用QueryTask）进行要素查询与过滤</font><br>\n\n\n5. <font color=#664499>获得结果FeatureResult，从中获取Geometry<font color=#ee0000>（并非与绘制图形做过交叉处理的Geometry）</font>与Attribute</font><br>\n\n\n6. <font color =#664499>图形切割与面积计算</font><br>\n\n\n7. 通过GraphicLayer进行图形展示以及图形条组与相应控件Item绑定<br>\n\n\n\n\n<hr>\n<br>\n\n\n## <font size=\"6\" face=\"黑体\" color=#005432 >**重要部分代码实现**</font>\n\n\n\n### 1.<font size=\"5\" face=\"黑体\">**分析区域选择**</font><br>\n\n\n\t//通过多点集合绘制几何图形\n\tpolygon.lineTo(currentPoint);\n\tcurrentGraphic = new Graphic(polygon, symbol);\n\tdrawLayer.updateGraphic(currentGraphicIndex,currentGraphic);\n\tpointGraphic=new Graphic(multiPoint,pointSymbol);\n\tdrawLayer.updateGraphic(pointGraphicIndex,pointGraphic);\n\tmultiPoint.add(currentPoint);\n\tif(lastGraphicIndex!=-1){\n\t\tdrawLayer.removeGraphic(lastGraphicIndex);\n\t}\n\tlastGraphic=new Graphic(currentPoint,lastSymbol);\n\tlastGraphicIndex=drawLayer.addGraphic(lastGraphic);\n    \n<br>\n\n\n### 2.<font size=\"5\" face=\"黑体\" color=#ff0000>**地图查询**</font><br>\n\n>   离线查询\n\n离线查询通过初始化一个QueryParameter并设置其参数，调用FeatureLayer对象的QueryFeature方法进行查询，拿到查询结果的Geometry与Attribute。\n\n\tQueryParameters queryParams=new QueryParameters();\n\t//设置区域\n\tif (isALL) {\n\tqueryParams.setGeometry(mapView_main.getExtent());\n\t}else {\n\t\tPolygon queryPolygon=measureManager.getpolygon();\n\t\tqueryParams.setGeometry(queryPolygon);\n\t}\n\t//设置过滤字段\n\tqueryParams.setOutFields(new String[]{\"*\"});\n\tlandAnalysisResultInfos=new ArrayList<>();\n\tList<LandAnalysisResultInfo> analysisResultInfos=new ArrayList<>();                    \n\tFuture<FeatureResult> resultFuture=null;\n\tFeatureResult featureResult=null;\n\tFeatureLayer featureLayer=(FeatureLayer)layer;\n\tresultFuture=featureLayer.getFeatureTable().queryFeatures(queryParams,callbackListener);\n\ttry {\n\t\t//获取结果\n\t\tfeatureResult=resultFuture.get();\n\t} catch (InterruptedException e) {\n\t\te.printStackTrace();\n\t} catch (ExecutionException e) {\n\t\te.printStackTrace();\n\t}\n\tif (featureResult!=null&&featureResult.featureCount()>0) {\n\t\tIterator it = featureResult.iterator();\n\t\t while (it.hasNext()){\n\t\tGeodatabaseFeature geodatabaseFeature= (GeodatabaseFeature) it.next();\n\t\tGeometry geometry=geodatabaseFeature.getGeometry();\n\t\t<String, Object> featureMap=geodatabaseFeature.getAttributes();\n\n\t\tif(geometry!=null){\n\t\t\t//进行图形处理\n\t\t}\n\t\tif (featureMap!=null&&featureMap.size()>0) {\n\t\t\t//进行内容详情提取处理\n\t\t}\n\t}\n<br>\n>   在线查询\n\n在线查询通过初始化一个QueryParameter并设置其参数，然后通过在线图层的URL初始化一个QueryTask，通过其对象的execute方法拿到查询结果的Geometry与Attribute。\n\n\tQueryParameters queryParams=new QueryParameters();\n\tPolygon Querypolygon=measureManager.getpolygon();\n\tqueryParams.setGeometry(Querypolygon);\n    landAnalysisResultInfos=new ArrayList<>();\n    queryParams.setOutFields(new String[]{\"*\"});\n    List<LandAnalysisResultInfo> analysisResultInfos=new ArrayList<>();\n    Future<FeatureResult> resultFuture=null;\n\tFeatureResult featureResult=null;\n\tArcGISDynamicMapServiceLayer featureLayer=(ArcGISDynamicMapServiceLayer)layer;\n\tQueryTask queryTask=new QueryTask(featureLayer.getQueryUrl(0));\n\tresultFuture=queryTask.execute(queryParams, callbackListener);\n\ttry {\n\t\tfeatureResult=resultFuture.get();\n\t} catch (InterruptedException e) {\n\t\te.printStackTrace();\n\t} catch (ExecutionException e) {\n\t\te.printStackTrace();\n\t}\n\tif (featureResult!=null&&featureResult.featureCount()>0) {\n\t\tfor (Object element : featureResult) {\n\t\t\tif (element instanceof Feature) {\n\t\t\t\tFeature f = (Feature) element;\n\t\t\t\tGeometry geometry=f.getGeometry();\n\t\t\t\tMap<String, Object> featureMap=f.getAttributes();\n\t\t\t\tif(geometry!=null){\n\t\t\t\t\t//进行图形处理\n\t\t\t\t}\n\t\t\t\tif (featureMap!=null&&featureMap.size()>0) {\n\t\t\t\t\t//进行内容详情提取处理\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}        \n<br>\n\n\n### 3.<font size=\"5\" face=\"黑体\" color=#ff0000>**图形交叉处理**</font><br>\n\n>  通过调用GeometeyEngine.intersect()方法获取。\n\n\tGeometry geometry = GeometryEngine.intersect(geometry,measureManager.getpolygon(),mapView_main.getSpatialReference());\n\n<br>\n\n\n### 4.<font size=\"5\" face=\"黑体\">**面积计算**</font><br>\n\n>由于获取的Geometry的面积与其父Geometry的面积均为调用Geometry对象的calculateArea2D()方法，并非实际面积。<br>\n>所以我们需要通过Attribute获得的实际面积计算切割Geometry与其父Geometry的实际面积，并计算其百分比。\n\n\t/**\n     *通过在地图上的Area大小计算百分比与实际面积\n     *\n     * @param landResourceInfos 分析结果的数组 成员： {@link LandAnalysisResultInfo}\n     * @return 一个结果的数组 变更了参数数组中成员的属性\n     */\n    public static List<LandAnalysisResultInfo> getLandPercentValue(List<LandAnalysisResultInfo> landResourceInfos){\n        /*计算实际面积 */\n        double MUM=0;\n        for (LandAnalysisResultInfo landResourceInfo : landResourceInfos) {\n            if (landResourceInfo.getYDMJ()==null) {\n                landResourceInfos.remove(landResourceInfo);\n                continue;\n            }\n            Double visualArea=landResourceInfo.getGeometry().calculateArea2D();\n            Double visualParentArea=landResourceInfo.getParentGeometry().calculateArea2D();\n            Double realArea=landResourceInfo.getYDMJ()/visualParentArea*visualArea;\n            landResourceInfo.setYDMJ(realArea);\n\n            //累计求和\n            MUM=MUM+landResourceInfo.getYDMJ();\n        }\n        /*分别计算百分比*/\n        for (LandAnalysisResultInfo landResourceInfo : landResourceInfos) {\n            landResourceInfo.setPercentValue(String.valueOf(landResourceInfo.getYDMJ()/MUM*100));\n        }\n        return landResourceInfos;\n    }\n<br>\n\n\n### 5.<font size=\"5\" face=\"黑体\">**图形展示**</font><br>\n\n>由于本次使用为列表显示，故图形展示在点击子Item的时候进行Geometry的绘制与添加。\n\n\t/**\n     * 结果列表点击效果\n     */\n    private AdapterView.OnItemClickListener resultListOnItemClickListener =new AdapterView.OnItemClickListener() {\n        @Override\n        public void onItemClick(AdapterView<?> parent, View view, int position, long id) {\n            resultDrawerLayer.removeAll();\n            resultDrawerLayer.addGraphic(new Graphic(landAnalysisResultInfos.get(position).getGeometry(), MapViewTapTool.getLabelSymbol(MainMapActivity.this,Geometry.Type.POLYGON, Color.BLUE)));\n            resultDrawerLayer.addGraphic(new Graphic(landAnalysisResultInfos.get(position).getParentGeometry(),MapViewTapTool.getLabelSymbol(MainMapActivity.this,Geometry.Type.POLYLINE, Color.BLACK)));\n            Envelope tempEnvelope = new Envelope();\n            landAnalysisResultInfos.get(position).getParentGeometry().queryEnvelope(tempEnvelope);\n            Point tempPoint = tEnvelope.getCenter();\n            mapView_main.centerAt(tempPoint,true);\n        }\n    };\n\n\n\n<hr>\n<br>\n\n\n## <font size=\"6\" face=\"黑体\" color=#005432 >**结语**</font>\n\n\n&emsp;&emsp;用地分析功能的开发，既减少了用户查看地图计算面积的时间，提高了地图的可阅读性。让用户通过移动设备简单的操作即可获取选取区域中各类型的板块内容与面积，并通过绘制图层让用户在地图上更直观的看清板块对象。\n\n<font  size = 3>[相关关键代码查看](https://github.com/xiaoshuiz/Rep4MarkDown/tree/%E7%94%A8%E5%9C%B0%E5%88%86%E6%9E%90%E5%85%B3%E9%94%AE%E4%BB%A3%E7%A0%81/%E7%94%A8%E5%9C%B0%E5%88%86%E6%9E%90 \"点击进去作者Git\")</font>\n<br>\n<br>\n\n<image src=\"http://www.dist.com.cn/templates/cn/images/logo.png\" align=\"right\">\n<br>&emsp;\n\n<br>\n<hr>\n\n","content":"<header><br><td bgcolor=\"#0099ff\"><br><br>   <center><table><tr><td bgcolor=\"#333333\"><font size=\"7\" face=\"黑体\" color=\"#ffffff\"><strong>移动用地分析功能</strong></font></td></tr></table></center><br><br><br></td><br></header>\n\n\n\n<h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a><font size=\"6\" face=\"黑体\" color=\"#005432\"><strong>简介</strong></font></h2><font size=\"4\">用地分析是指在对地区各自然要素进行综合分析研究的基础上，按照城市规划和建设要求、用地整备工程技术的可能性和经济性，对城市规划用地进行适用性分析评定，以划出城市用地的不同等级。</font><br><br><br><font size=\"4\">另外用于查清村和农、林、牧、渔场，居民点及其以外的独立工矿企事业单位土地权属界线和村以上各级行政界线，查清各类用地面积、分布和利用状况。</font><br><br><br><font color=\"#664499\" size=\"4\">在本文中，用地分析主要实现为对所选中区域进行土地类别、面积和分布的识别与判断，计算其中各个层级占其父级的百分比以及面积情况。</font>\n\n\n<hr>\n\n<p><br></p>\n<h2 id=\"实现逻辑略析\"><a href=\"#实现逻辑略析\" class=\"headerlink\" title=\"实现逻辑略析\"></a><font size=\"6\" face=\"黑体\" color=\"#005432\"><strong>实现逻辑略析</strong></font></h2><ol>\n<li>可视化与相关功能操作窗口的基本实现<br></li>\n</ol>\n<ol start=\"2\">\n<li>加载功能基础的地图底图与分析操作图层<br></li>\n</ol>\n<ol start=\"3\">\n<li>分析区域的选择并获取当前图形<br></li>\n</ol>\n<ol start=\"4\">\n<li><font color=\"#664499\">离线调用FeatureQuery（在线调用QueryTask）进行要素查询与过滤</font><br></li>\n</ol>\n<ol start=\"5\">\n<li><font color=\"#664499\">获得结果FeatureResult，从中获取Geometry<font color=\"#ee0000\">（并非与绘制图形做过交叉处理的Geometry）</font>与Attribute</font><br></li>\n</ol>\n<ol start=\"6\">\n<li><font color=\"#664499\">图形切割与面积计算</font><br></li>\n</ol>\n<ol start=\"7\">\n<li>通过GraphicLayer进行图形展示以及图形条组与相应控件Item绑定<br></li>\n</ol>\n<p><hr><br><br></p>\n<h2 id=\"重要部分代码实现\"><a href=\"#重要部分代码实现\" class=\"headerlink\" title=\"重要部分代码实现\"></a><font size=\"6\" face=\"黑体\" color=\"#005432\"><strong>重要部分代码实现</strong></font></h2><h3 id=\"1-分析区域选择\"><a href=\"#1-分析区域选择\" class=\"headerlink\" title=\"1.分析区域选择\"></a>1.<font size=\"5\" face=\"黑体\"><strong>分析区域选择</strong></font><br></h3><pre><code>//通过多点集合绘制几何图形\npolygon.lineTo(currentPoint);\ncurrentGraphic = new Graphic(polygon, symbol);\ndrawLayer.updateGraphic(currentGraphicIndex,currentGraphic);\npointGraphic=new Graphic(multiPoint,pointSymbol);\ndrawLayer.updateGraphic(pointGraphicIndex,pointGraphic);\nmultiPoint.add(currentPoint);\nif(lastGraphicIndex!=-1){\n    drawLayer.removeGraphic(lastGraphicIndex);\n}\nlastGraphic=new Graphic(currentPoint,lastSymbol);\nlastGraphicIndex=drawLayer.addGraphic(lastGraphic);\n</code></pre><p><br></p>\n<h3 id=\"2-地图查询\"><a href=\"#2-地图查询\" class=\"headerlink\" title=\"2.地图查询\"></a>2.<font size=\"5\" face=\"黑体\" color=\"#ff0000\"><strong>地图查询</strong></font><br></h3><blockquote>\n<p>  离线查询</p>\n</blockquote>\n<p>离线查询通过初始化一个QueryParameter并设置其参数，调用FeatureLayer对象的QueryFeature方法进行查询，拿到查询结果的Geometry与Attribute。</p>\n<pre><code>QueryParameters queryParams=new QueryParameters();\n//设置区域\nif (isALL) {\nqueryParams.setGeometry(mapView_main.getExtent());\n}else {\n    Polygon queryPolygon=measureManager.getpolygon();\n    queryParams.setGeometry(queryPolygon);\n}\n//设置过滤字段\nqueryParams.setOutFields(new String[]{&quot;*&quot;});\nlandAnalysisResultInfos=new ArrayList&lt;&gt;();\nList&lt;LandAnalysisResultInfo&gt; analysisResultInfos=new ArrayList&lt;&gt;();                    \nFuture&lt;FeatureResult&gt; resultFuture=null;\nFeatureResult featureResult=null;\nFeatureLayer featureLayer=(FeatureLayer)layer;\nresultFuture=featureLayer.getFeatureTable().queryFeatures(queryParams,callbackListener);\ntry {\n    //获取结果\n    featureResult=resultFuture.get();\n} catch (InterruptedException e) {\n    e.printStackTrace();\n} catch (ExecutionException e) {\n    e.printStackTrace();\n}\nif (featureResult!=null&amp;&amp;featureResult.featureCount()&gt;0) {\n    Iterator it = featureResult.iterator();\n     while (it.hasNext()){\n    GeodatabaseFeature geodatabaseFeature= (GeodatabaseFeature) it.next();\n    Geometry geometry=geodatabaseFeature.getGeometry();\n    &lt;String, Object&gt; featureMap=geodatabaseFeature.getAttributes();\n\n    if(geometry!=null){\n        //进行图形处理\n    }\n    if (featureMap!=null&amp;&amp;featureMap.size()&gt;0) {\n        //进行内容详情提取处理\n    }\n}\n</code></pre><p><br></p>\n<blockquote>\n<p>  在线查询</p>\n</blockquote>\n<p>在线查询通过初始化一个QueryParameter并设置其参数，然后通过在线图层的URL初始化一个QueryTask，通过其对象的execute方法拿到查询结果的Geometry与Attribute。</p>\n<pre><code>QueryParameters queryParams=new QueryParameters();\nPolygon Querypolygon=measureManager.getpolygon();\nqueryParams.setGeometry(Querypolygon);\nlandAnalysisResultInfos=new ArrayList&lt;&gt;();\nqueryParams.setOutFields(new String[]{&quot;*&quot;});\nList&lt;LandAnalysisResultInfo&gt; analysisResultInfos=new ArrayList&lt;&gt;();\nFuture&lt;FeatureResult&gt; resultFuture=null;\nFeatureResult featureResult=null;\nArcGISDynamicMapServiceLayer featureLayer=(ArcGISDynamicMapServiceLayer)layer;\nQueryTask queryTask=new QueryTask(featureLayer.getQueryUrl(0));\nresultFuture=queryTask.execute(queryParams, callbackListener);\ntry {\n    featureResult=resultFuture.get();\n} catch (InterruptedException e) {\n    e.printStackTrace();\n} catch (ExecutionException e) {\n    e.printStackTrace();\n}\nif (featureResult!=null&amp;&amp;featureResult.featureCount()&gt;0) {\n    for (Object element : featureResult) {\n        if (element instanceof Feature) {\n            Feature f = (Feature) element;\n            Geometry geometry=f.getGeometry();\n            Map&lt;String, Object&gt; featureMap=f.getAttributes();\n            if(geometry!=null){\n                //进行图形处理\n            }\n            if (featureMap!=null&amp;&amp;featureMap.size()&gt;0) {\n                //进行内容详情提取处理\n            }\n        }\n    }\n}        \n</code></pre><p><br></p>\n<h3 id=\"3-图形交叉处理\"><a href=\"#3-图形交叉处理\" class=\"headerlink\" title=\"3.图形交叉处理\"></a>3.<font size=\"5\" face=\"黑体\" color=\"#ff0000\"><strong>图形交叉处理</strong></font><br></h3><blockquote>\n<p> 通过调用GeometeyEngine.intersect()方法获取。</p>\n</blockquote>\n<pre><code>Geometry geometry = GeometryEngine.intersect(geometry,measureManager.getpolygon(),mapView_main.getSpatialReference());\n</code></pre><p><br></p>\n<h3 id=\"4-面积计算\"><a href=\"#4-面积计算\" class=\"headerlink\" title=\"4.面积计算\"></a>4.<font size=\"5\" face=\"黑体\"><strong>面积计算</strong></font><br></h3><blockquote>\n<p>由于获取的Geometry的面积与其父Geometry的面积均为调用Geometry对象的calculateArea2D()方法，并非实际面积。<br><br>所以我们需要通过Attribute获得的实际面积计算切割Geometry与其父Geometry的实际面积，并计算其百分比。</p>\n</blockquote>\n<pre><code>/**\n *通过在地图上的Area大小计算百分比与实际面积\n *\n * @param landResourceInfos 分析结果的数组 成员： {@link LandAnalysisResultInfo}\n * @return 一个结果的数组 变更了参数数组中成员的属性\n */\npublic static List&lt;LandAnalysisResultInfo&gt; getLandPercentValue(List&lt;LandAnalysisResultInfo&gt; landResourceInfos){\n    /*计算实际面积 */\n    double MUM=0;\n    for (LandAnalysisResultInfo landResourceInfo : landResourceInfos) {\n        if (landResourceInfo.getYDMJ()==null) {\n            landResourceInfos.remove(landResourceInfo);\n            continue;\n        }\n        Double visualArea=landResourceInfo.getGeometry().calculateArea2D();\n        Double visualParentArea=landResourceInfo.getParentGeometry().calculateArea2D();\n        Double realArea=landResourceInfo.getYDMJ()/visualParentArea*visualArea;\n        landResourceInfo.setYDMJ(realArea);\n\n        //累计求和\n        MUM=MUM+landResourceInfo.getYDMJ();\n    }\n    /*分别计算百分比*/\n    for (LandAnalysisResultInfo landResourceInfo : landResourceInfos) {\n        landResourceInfo.setPercentValue(String.valueOf(landResourceInfo.getYDMJ()/MUM*100));\n    }\n    return landResourceInfos;\n}\n</code></pre><p><br></p>\n<h3 id=\"5-图形展示\"><a href=\"#5-图形展示\" class=\"headerlink\" title=\"5.图形展示\"></a>5.<font size=\"5\" face=\"黑体\"><strong>图形展示</strong></font><br></h3><blockquote>\n<p>由于本次使用为列表显示，故图形展示在点击子Item的时候进行Geometry的绘制与添加。</p>\n</blockquote>\n<pre><code>/**\n * 结果列表点击效果\n */\nprivate AdapterView.OnItemClickListener resultListOnItemClickListener =new AdapterView.OnItemClickListener() {\n    @Override\n    public void onItemClick(AdapterView&lt;?&gt; parent, View view, int position, long id) {\n        resultDrawerLayer.removeAll();\n        resultDrawerLayer.addGraphic(new Graphic(landAnalysisResultInfos.get(position).getGeometry(), MapViewTapTool.getLabelSymbol(MainMapActivity.this,Geometry.Type.POLYGON, Color.BLUE)));\n        resultDrawerLayer.addGraphic(new Graphic(landAnalysisResultInfos.get(position).getParentGeometry(),MapViewTapTool.getLabelSymbol(MainMapActivity.this,Geometry.Type.POLYLINE, Color.BLACK)));\n        Envelope tempEnvelope = new Envelope();\n        landAnalysisResultInfos.get(position).getParentGeometry().queryEnvelope(tempEnvelope);\n        Point tempPoint = tEnvelope.getCenter();\n        mapView_main.centerAt(tempPoint,true);\n    }\n};\n</code></pre><p><hr><br><br></p>\n<h2 id=\"结语\"><a href=\"#结语\" class=\"headerlink\" title=\"结语\"></a><font size=\"6\" face=\"黑体\" color=\"#005432\"><strong>结语</strong></font></h2><p>&emsp;&emsp;用地分析功能的开发，既减少了用户查看地图计算面积的时间，提高了地图的可阅读性。让用户通过移动设备简单的操作即可获取选取区域中各类型的板块内容与面积，并通过绘制图层让用户在地图上更直观的看清板块对象。</p>\n<p><font size=\"3\"><a href=\"https://github.com/xiaoshuiz/Rep4MarkDown/tree/%E7%94%A8%E5%9C%B0%E5%88%86%E6%9E%90%E5%85%B3%E9%94%AE%E4%BB%A3%E7%A0%81/%E7%94%A8%E5%9C%B0%E5%88%86%E6%9E%90\" title=\"点击进去作者Git\" target=\"_blank\" rel=\"noopener\">相关关键代码查看</a></font><br><br><br><br></p>\n<p><image src=\"http://www.dist.com.cn/templates/cn/images/logo.png\" align=\"right\"><br><br>&emsp;</image></p>\n<p><br></p>\n<hr>\n\n","slug":"landanalysis","updated":"2018-11-01T08:16:17.293Z","comments":true,"link":"","permalink":"http://yoursite.com/2018/08/13/landanalysis/","excerpt":"","categories":[{"name":"工作","slug":"工作","permalink":"http://yoursite.com/categories/工作/"}],"tags":[{"name":"Android","slug":"Android","permalink":"http://yoursite.com/tags/Android/"}]},{"title":"Legend Filter","date":"2018-07-24T01:16:24.000Z","path":"2018/07/24/legendfilter/","text":"移动图例过滤功能 —– &emsp; xiaoshuiz&emsp; &emsp;&emsp;&emsp; 简介图例过滤是对于多图例图层的一种查看方式，这种查看方式方便对特定类型的图块进行统一查看。多图例图层一般为DynamicLayer与FeatureLayer,而且单个图例的图层与多个图例的图层，其渲染器也是不同的，单个图例的为SimpleRenderer，多个图例为UniqueValueRenderer。在本文中，图例过滤主要为对图例进行特定过滤达到多图层互斥过滤的效果，另外对于在线图例过滤使用了Layer Definition进行图层Visible控制问题。 实现逻辑略析 可视化与相关功能操作监听的基本实现 加载功能基础的分析操作图层与其图例 单个图例的点击并获取其LabelName 在线将ArcGisDynamicServiceLayer通过ArcGisFeatureLayer加载，并获取其Renderer转为UniqueValueRenderer（离线获取FeatureLayer的Renderer） 并获取Render中的Feild1字段（配置的过滤字段） WhereClause语句的拼接（过滤字段与LabelName中的值拼接成Sql Where语句） 在线通过设置ArcGisDynamicServiceLayer的LayerDefinition（离线通过设置FeatureLayer的DefinitionExpression）进行过滤 对于在线DynamicLayer多图层控制显示问题，将Visible控制可视改为Layer Definition控制可视，只维护一套属性。 重要部分代码实现1.LayerDefinition控制可视 /** ** 根据visibleIds 更新DynamicLayer 通过DynamicLayer的Definition进行控制显示 ** Definition中 1-&gt; “1=1” 表示图层 1 全部显示 **/ //要存储的LayerDefinitions Map&lt;String, Map&lt;Integer, String&gt;&gt; dynamicLayerDefinitionMap = TotalApplication.getDynamicLayerDefinitionMap(); //要操作的LayerDefinitions Map&lt;Integer, String&gt; layerDefinitions = dynamicLayer.getLayerDefinitions(); if (layerDefinitions==null) { layerDefinitions=new HashMap&lt;&gt;(); } if (isOpenLayer) { //显示 if (dynamicLayerDefinitionMap.containsKey(dynamicLayer.getUrl())) { //从存储语句中获取之前的过滤语句 for (int visibleId : visibleIds) { Map&lt;Integer, String&gt; integerStringMap = dynamicLayerDefinitionMap.get(dynamicLayer.getUrl()); if (integerStringMap.containsKey(visibleId) &amp;&amp;integerStringMap.get(visibleId)!=null &amp;&amp;!Constants.SQL_FALSE.equalsIgnoreCase(integerStringMap.get(visibleId))) { //已存该layer的id的Layer Definition Sql 语句 layerDefinitions.put(visibleId,integerStringMap.get(visibleId)); }else { //全部显示 layerDefinitions.put(visibleId,Constants.SQL_TURE); } } }else { //全部显示 for (int visibleId : visibleIds) { layerDefinitions.put(visibleId,Constants.SQL_TURE); } } }else { //关闭 if (!layerDefinitions.isEmpty()) { Map&lt;Integer, String&gt; integerStringMap; if (dynamicLayerDefinitionMap.containsKey(dynamicLayer.getUrl())) { //存储中有这个Layer的Definition integerStringMap = dynamicLayerDefinitionMap.get(dynamicLayer.getUrl()); }else { //存储中没有这个layer的definition integerStringMap=new HashMap&lt;&gt;(); } for (int visibleId : visibleIds) { if (layerDefinitions.containsKey(visibleId) &amp;&amp;layerDefinitions.get(visibleId)!=null &amp;&amp;!Constants.SQL_FALSE.equalsIgnoreCase(layerDefinitions.get(visibleId))) { //有可视语句，进行储存 integerStringMap.put(visibleId,layerDefinitions.get(visibleId)); } //取消可视 layerDefinitions.put(visibleId,Constants.SQL_FALSE); } TotalApplication.getDynamicLayerDefinitionMap().put(dynamicLayer.getUrl(),integerStringMap); }else { //一般走不到这，避免花里胡哨的操作 for (int visibleId : visibleIds) { //取消可视 layerDefinitions.put(visibleId,Constants.SQL_FALSE); } } } dynamicLayer.setLayerDefinitions(layerDefinitions); dynamicLayer.refresh(); 2.Render获取与过滤字段获取 离线获取 离线用的FeatureLayer.getRenderer() FeatureLayer featureLayer= (FeatureLayer) layer; //判断是否获取过，避免重复查询 if (TotalApplication.getInstanceFilterFieldMap().containsKey(layerName)) { filterField=TotalApplication.getInstanceFilterFieldMap().get(layerName); }else{ //记录已查询 以免无结果 重复查询 TotalApplication.getInstanceFilterFieldMap().put(layerName,Constants.NO_FILTER_FIELD); filterField=Constants.NO_FILTER_FIELD; //获取过滤字段 Renderer renderer = featureLayer.getRenderer(); if (renderer instanceof UniqueValueRenderer) { UniqueValueRenderer uniqueValueRenderer= (UniqueValueRenderer) renderer; filterField = uniqueValueRenderer.getField1(); TotalApplication.getInstanceFilterFieldMap().put(layerName,filterField); } } 在线获取 在线通过加载ArcGisFeatureLayer获取Renderer中的过滤字段 //Renderer中过滤字段的查询和保存，避免重复加载 例：RDDM if (TotalApplication.getInstanceFilterFieldMap().keySet().contains(url+Constants.SPLIT_SYMBOL[4]+layerID)) { //通知过滤 }else{ final ArcGISFeatureLayer arcGISFeatureLayer= new ArcGISFeatureLayer(url+Constants.SPLIT_SYMBOL[4]+layerID, ArcGISFeatureLayer.MODE.SELECTION); final String finalUrl = url; final String finalLayerID = layerID; arcGISFeatureLayer.setOnStatusChangedListener(new OnStatusChangedListener() { @Override public void onStatusChanged(Object o, STATUS status) { if (status== STATUS.INITIALIZED) { //记录已查询 以免无结果 重复查询 TotalApplication.getInstanceFilterFieldMap().put(arcGISFeatureLayer.getUrl(),Constants.NO_FILTER_FIELD); Renderer renderer = arcGISFeatureLayer.getRenderer(); if (renderer!=null) { if (renderer instanceof UniqueValueRenderer) { UniqueValueRenderer uniqueValueRenderer= (UniqueValueRenderer) renderer; //获取过滤字段 RDDM String filterField = uniqueValueRenderer.getField1(); if (filterField!=null&amp;&amp;!filterField.isEmpty()) { TotalApplication.getInstanceFilterFieldMap().put(arcGISFeatureLayer.getUrl(),filterField); } } } //通知过滤 } } }); } 3.图例过滤 离线过滤 离线用的FeatureLayer过滤 FeatureLayer的LayerDefinition为 String (Sql Where Clause)，无需控制图层，且可以和Visible混合使用 //图例过滤 例：YDDM = &apos;mc&apos; featureLayer.setDefinitionExpression(filterField+Constants.WHERE_EQUAL+Constants.WHERE_QUOTATION_MARKS+finalLegendLabel+Constants.WHERE_QUOTATION_MARKS); 在线过滤 在线用的ArcGISDynamicMapServiceLayer过滤ArcGISDynamicMapServiceLayer的LayerDefinition为Map&lt; int(layerId) , String(Sql Where Clause) &gt;，得到所需数据进行过滤 //图例过滤 if (filterField!=null&amp;&amp;!Constants.NO_FILTER_FIELD.equalsIgnoreCase(filterField)&amp;&amp;!filterField.isEmpty()) { if (layer instanceof ArcGISDynamicMapServiceLayer) { //拼组Sql Where clause 并设置LayerDefinitions 进行过滤 Map&lt;Integer, String&gt; layerDefinitions = ((ArcGISDynamicMapServiceLayer) layer).getLayerDefinitions(); if (layerDefinitions==null) { layerDefinitions=new HashMap&lt;Integer, String&gt;(); } //map中： layerId -&gt; where clause YDDM = &apos;G1&apos; layerDefinitions.put(Integer.parseInt(layerId),filterField+Constants.WHERE_EQUAL+Constants.WHERE_QUOTATION_MARKS+legendName+Constants.WHERE_QUOTATION_MARKS); ((ArcGISDynamicMapServiceLayer) layer).setLayerDefinitions(layerDefinitions); ((ArcGISDynamicMapServiceLayer) layer).refresh(); } } 4.结束过滤(全部显示) 离线结束过滤 Map&lt;String, Layer&gt; layerMap = TotalApplication.getInstanceAllLayerMap(); if (layerMap.containsKey(name)) { Layer layer = layerMap.get(name); if (layer instanceof FeatureLayer) { //设置LayerDefinition ((FeatureLayer) layer).setDefinitionExpression(Constants.SQL_TURE); //数据改变 legendAdapter.selectLabel= Constants.NO_SELECT; TotalApplication.getLayerSelectLabelMap().put(name,Constants.NO_SELECT); legendAdapter.notifyDataSetChanged(); } } 在线结束过滤 //获取当前layer对应的Service Layer 的URL与Id List&lt;ThemeInfo&gt; theme = oneMapActivity.mDataSource.getTheme(); for (ThemeInfo themeInfo : theme) { if (name.equalsIgnoreCase(themeInfo.getName())) { serviceUID=themeInfo.getServiceUid(); layerID=themeInfo.getLayerId(); } } List&lt;MapServicesInfo&gt; mapServices = oneMapActivity.mDataSource.getMapServices(); for (MapServicesInfo mapService : mapServices) { if (serviceUID!=null&amp;&amp;serviceUID.equalsIgnoreCase(mapService.getName())) { url=mapService.getUrl(); } } //数据改变 legendAdapter.selectLabel= Constants.NO_SELECT; TotalApplication.getLayerSelectLabelMap().put(name,Constants.NO_SELECT); legendAdapter.notifyDataSetChanged(); //TODO 通知图例过滤 全部显示 if (layer instanceof ArcGISDynamicMapServiceLayer) { Map&lt;Integer, String&gt; layerDefinitions = ((ArcGISDynamicMapServiceLayer) layer).getLayerDefinitions(); if (layerDefinitions==null){ layerDefinitions=new HashMap&lt;Integer, String&gt;(); } layerDefinitions.put(Integer.parseInt(layerId),Constants.SQL_TURE); ((ArcGISDynamicMapServiceLayer) layer).setLayerDefinitions(layerDefinitions); ((ArcGISDynamicMapServiceLayer) layer).refresh(); } 结语&emsp;&emsp;图例过滤功能的开发，既减少了用户手动查找相应地块和汇总的时间，提高了地图的可阅读性。让用户通过移动设备简单的操作地图中同一类型的地块汇总，并通过绘制图层让用户在地图上更直观的看清板块对象。 &emsp;","raw":"---\ntitle: Legend Filter\ndate: 2018-07-24 09:16:24\ntags: Android\ncategories: 工作\n---\n\n\n\n<header> \n<td bgcolor=#0099ff>   \n\n   <center><table><tr><td bgcolor=#333333><font size =7 face=\"黑体\" color=#ffffff>**移动图例过滤功能**</td></tr></table></center>\n   \n\n</td>\n\n</header>\n<div style=\"text-align: right\"><font size=\"4\" >\n----- &emsp;\n xiaoshuiz  \n&emsp;  &emsp;&emsp;&emsp;   \n </font>\n</div>\n<br>\n\n\n## <font size=\"6\" face=\"黑体\" color=#005432 >**简介**</font>\n\n\n\n<font size=\"4\">图例过滤是对于多图例图层的一种查看方式，这种查看方式方便对特定类型的图块进行统一查看。</font>\n<br>\n<font size=\"4\">多图例图层一般为DynamicLayer与FeatureLayer,而且单个图例的图层与多个图例的图层，其渲染器也是不同的，单个图例的为SimpleRenderer，多个图例为UniqueValueRenderer。</font>\n<br>\n<font color=#664499 size=\"4\">在本文中，图例过滤主要为对图例进行特定过滤达到多图层互斥过滤的效果，另外对于在线图例过滤使用了Layer Definition进行图层Visible控制问题。</font>\n\n<hr>\n<br>\n\n\n## <font size=\"6\" face=\"黑体\" color=#005432 >**实现逻辑略析**</font>\n\n\n1. 可视化与相关功能操作监听的基本实现<br>\n\n\n2. 加载功能基础的分析操作图层与其图例<br>\n\n\n3. 单个图例的点击并获取其LabelName<br>\n\n\n4. <font color=#664499>在线将ArcGisDynamicServiceLayer通过ArcGisFeatureLayer加载，并获取其Renderer转为UniqueValueRenderer（离线获取FeatureLayer的Renderer） 并获取Render中的Feild1字段<font color=#ee0000>（配置的过滤字段）</font></font><br>\n\n\n5. <font color =#664499>WhereClause语句的拼接（过滤字段与LabelName中的值拼接成Sql Where语句）</font><br>\n\n\n6. <font color=#664499>在线通过设置ArcGisDynamicServiceLayer的LayerDefinition（离线通过设置FeatureLayer的DefinitionExpression）进行过滤</font><br>\n\n7. 对于在线DynamicLayer多图层控制显示问题，将Visible控制可视改为Layer Definition控制可视，只维护一套属性。\n\n\n\n\n\n\n<hr>\n<br>\n\n\n## <font size=\"6\" face=\"黑体\" color=#ffb022 >**重要**</font><font size=\"6\" face=\"黑体\" color=#005432 >**部分代码实现**</font>\n\n\n###  1.<font size=\"5\" face=\"黑体\">**LayerDefinition控制可视**</font><br>\n\n> /** \n> \n>   **   根据visibleIds 更新DynamicLayer 通过DynamicLayer的Definition进行控制显示\n>   \n>   ** Definition中 1-> \"1=1\" 表示图层 1 全部显示\n>   \n>   **/   \n <br>\n\n\n\n\n\t\t\n        //要存储的LayerDefinitions\n        Map<String, Map<Integer, String>> dynamicLayerDefinitionMap = TotalApplication.getDynamicLayerDefinitionMap();\n        //要操作的LayerDefinitions\n        Map<Integer, String> layerDefinitions = dynamicLayer.getLayerDefinitions();\n        if (layerDefinitions==null) {\n            layerDefinitions=new HashMap<>();\n        }\n        if (isOpenLayer) {\n            //显示\n            if (dynamicLayerDefinitionMap.containsKey(dynamicLayer.getUrl())) {\n                //从存储语句中获取之前的过滤语句\n                for (int visibleId : visibleIds) {\n\n                    Map<Integer, String> integerStringMap = dynamicLayerDefinitionMap.get(dynamicLayer.getUrl());\n                    if (integerStringMap.containsKey(visibleId)\n                            &&integerStringMap.get(visibleId)!=null\n                            &&!Constants.SQL_FALSE.equalsIgnoreCase(integerStringMap.get(visibleId))) {\n                        //已存该layer的id的Layer Definition Sql 语句\n                        layerDefinitions.put(visibleId,integerStringMap.get(visibleId));\n                    }else {\n                        //全部显示\n                        layerDefinitions.put(visibleId,Constants.SQL_TURE);\n                    }\n                }\n            }else {\n                //全部显示\n                for (int visibleId : visibleIds) {\n                    layerDefinitions.put(visibleId,Constants.SQL_TURE);\n                }\n            }\n        }else {\n            //关闭\n            if (!layerDefinitions.isEmpty()) {\n                Map<Integer, String> integerStringMap;\n                if (dynamicLayerDefinitionMap.containsKey(dynamicLayer.getUrl())) {\n                    //存储中有这个Layer的Definition\n                    integerStringMap = dynamicLayerDefinitionMap.get(dynamicLayer.getUrl());\n                }else {\n                    //存储中没有这个layer的definition\n                    integerStringMap=new HashMap<>();\n                }\n                for (int visibleId : visibleIds) {\n                    if (layerDefinitions.containsKey(visibleId)\n                            &&layerDefinitions.get(visibleId)!=null\n                            &&!Constants.SQL_FALSE.equalsIgnoreCase(layerDefinitions.get(visibleId))) {\n                        //有可视语句，进行储存\n                        integerStringMap.put(visibleId,layerDefinitions.get(visibleId));\n                    }\n                    //取消可视\n                    layerDefinitions.put(visibleId,Constants.SQL_FALSE);\n                }\n                TotalApplication.getDynamicLayerDefinitionMap().put(dynamicLayer.getUrl(),integerStringMap);\n\n            }else {\n                //一般走不到这，避免花里胡哨的操作\n                for (int visibleId : visibleIds) {\n                    //取消可视\n                    layerDefinitions.put(visibleId,Constants.SQL_FALSE);\n                }\n            }\n        }\n        dynamicLayer.setLayerDefinitions(layerDefinitions);\n        dynamicLayer.refresh();\n    \n<br>\n\n\n###  2.<font size=\"5\" face=\"黑体\">**Render获取与过滤字段获取**</font><br>\n\n>   离线获取\n\n离线用的FeatureLayer.getRenderer()\n<br>\n\n\t \t\t\tFeatureLayer featureLayer= (FeatureLayer) layer;\n                //判断是否获取过，避免重复查询\n                if (TotalApplication.getInstanceFilterFieldMap().containsKey(layerName)) {\n                    filterField=TotalApplication.getInstanceFilterFieldMap().get(layerName);\n                }else{\n                    //记录已查询 以免无结果 重复查询\n                    TotalApplication.getInstanceFilterFieldMap().put(layerName,Constants.NO_FILTER_FIELD);\n                    filterField=Constants.NO_FILTER_FIELD;\n                    //获取过滤字段\n                    Renderer renderer = featureLayer.getRenderer();\n                    if (renderer instanceof UniqueValueRenderer) {\n                        UniqueValueRenderer uniqueValueRenderer= (UniqueValueRenderer) renderer;\n                        filterField = uniqueValueRenderer.getField1();\n                        TotalApplication.getInstanceFilterFieldMap().put(layerName,filterField);\n                    }\n                }\n\n<br>\n\n>   在线获取\n\n在线通过加载ArcGisFeatureLayer获取Renderer中的过滤字段\n<br>\n\n\t\t\n        //Renderer中过滤字段的查询和保存，避免重复加载 例：RDDM\n        if (TotalApplication.getInstanceFilterFieldMap().keySet().contains(url+Constants.SPLIT_SYMBOL[4]+layerID)) {\n            //通知过滤\n        }else{\n            final ArcGISFeatureLayer arcGISFeatureLayer= new ArcGISFeatureLayer(url+Constants.SPLIT_SYMBOL[4]+layerID, ArcGISFeatureLayer.MODE.SELECTION);\n            final String finalUrl = url;\n            final String finalLayerID = layerID;\n            arcGISFeatureLayer.setOnStatusChangedListener(new OnStatusChangedListener() {\n                @Override\n                public void onStatusChanged(Object o, STATUS status) {\n                    if (status== STATUS.INITIALIZED) {\n                        //记录已查询 以免无结果 重复查询\n                        TotalApplication.getInstanceFilterFieldMap().put(arcGISFeatureLayer.getUrl(),Constants.NO_FILTER_FIELD);\n                        Renderer renderer = arcGISFeatureLayer.getRenderer();\n                        if (renderer!=null) {\n\n                            if (renderer instanceof UniqueValueRenderer) {\n                                UniqueValueRenderer uniqueValueRenderer= (UniqueValueRenderer) renderer;\n                                //获取过滤字段 RDDM\n                                String filterField = uniqueValueRenderer.getField1();\n                                if (filterField!=null&&!filterField.isEmpty()) {\n                                    TotalApplication.getInstanceFilterFieldMap().put(arcGISFeatureLayer.getUrl(),filterField);\n                                }\n                            }\n                        }\n\t\t\t\t\t\t//通知过滤\n                    }\n\n                }\n            });\n        }  \n\n\n###  3.<font size=\"5\" face=\"黑体\" color=#ff0000>**图例过滤**</font><br>\n\n>   离线过滤\n\n离线用的FeatureLayer过滤 FeatureLayer的LayerDefinition为 String (Sql Where Clause)，\n<br>\n无需控制图层，且可以和Visible混合使用\n\n\t \t\t\t\n                \n                //图例过滤 例：YDDM = 'mc'\n                featureLayer.setDefinitionExpression(filterField+Constants.WHERE_EQUAL+Constants.WHERE_QUOTATION_MARKS+finalLegendLabel+Constants.WHERE_QUOTATION_MARKS);\n\n<br>\n>   在线过滤\n\n在线用的ArcGISDynamicMapServiceLayer过滤\n<br>ArcGISDynamicMapServiceLayer的LayerDefinition为Map< int(layerId) , String(Sql Where Clause) >，\n<br>\n得到所需数据进行过滤\n<br>\n\n\t\t\t\t\n                    //图例过滤\n                    if (filterField!=null&&!Constants.NO_FILTER_FIELD.equalsIgnoreCase(filterField)&&!filterField.isEmpty()) {\n                        if (layer instanceof ArcGISDynamicMapServiceLayer) {\n                            //拼组Sql Where clause 并设置LayerDefinitions 进行过滤\n                            Map<Integer, String> layerDefinitions = ((ArcGISDynamicMapServiceLayer) layer).getLayerDefinitions();\n                            if (layerDefinitions==null) {\n                                layerDefinitions=new HashMap<Integer, String>();\n                            }\n                            //map中： layerId -> where clause   YDDM = 'G1'\n                            layerDefinitions.put(Integer.parseInt(layerId),filterField+Constants.WHERE_EQUAL+Constants.WHERE_QUOTATION_MARKS+legendName+Constants.WHERE_QUOTATION_MARKS);\n                            ((ArcGISDynamicMapServiceLayer) layer).setLayerDefinitions(layerDefinitions);\n                            ((ArcGISDynamicMapServiceLayer) layer).refresh();\n                        }\n                    }\n              \n\n\n\n###  4.<font size=\"5\" face=\"黑体\" color=#ff0000>**结束过滤(全部显示)**</font><br>\n\n>  离线结束过滤\n\n\n\n\t\tMap<String, Layer> layerMap = TotalApplication.getInstanceAllLayerMap();\n        if (layerMap.containsKey(name)) {\n            Layer layer = layerMap.get(name);\n            if (layer instanceof FeatureLayer) {\n                //设置LayerDefinition\n                ((FeatureLayer) layer).setDefinitionExpression(Constants.SQL_TURE);\n                //数据改变\n                legendAdapter.selectLabel= Constants.NO_SELECT;\n                TotalApplication.getLayerSelectLabelMap().put(name,Constants.NO_SELECT);\n                legendAdapter.notifyDataSetChanged();\n            }\n        }\n\n<br>\n\n>  在线结束过滤\n\n\n\n\t\t//获取当前layer对应的Service Layer 的URL与Id\n        List<ThemeInfo> theme = oneMapActivity.mDataSource.getTheme();\n        for (ThemeInfo themeInfo : theme) {\n            if (name.equalsIgnoreCase(themeInfo.getName())) {\n                serviceUID=themeInfo.getServiceUid();\n                layerID=themeInfo.getLayerId();\n            }\n        }\n        List<MapServicesInfo> mapServices = oneMapActivity.mDataSource.getMapServices();\n        for (MapServicesInfo mapService : mapServices) {\n            if (serviceUID!=null&&serviceUID.equalsIgnoreCase(mapService.getName())) {\n                url=mapService.getUrl();\n            }\n        }\n        //数据改变\n        legendAdapter.selectLabel= Constants.NO_SELECT;\n        TotalApplication.getLayerSelectLabelMap().put(name,Constants.NO_SELECT);\n        legendAdapter.notifyDataSetChanged();\n\t\t//TODO 通知图例过滤\n\n<br>\n全部显示\n\n    if (layer instanceof ArcGISDynamicMapServiceLayer) {\n    \tMap<Integer, String> layerDefinitions = ((ArcGISDynamicMapServiceLayer) layer).getLayerDefinitions();\n        if (layerDefinitions==null){\n        \tlayerDefinitions=new HashMap<Integer, String>();\n    \t}\n    \tlayerDefinitions.put(Integer.parseInt(layerId),Constants.SQL_TURE);\n    \t((ArcGISDynamicMapServiceLayer) layer).setLayerDefinitions(layerDefinitions);\n    \t((ArcGISDynamicMapServiceLayer) layer).refresh();\n\t}\n                \n\n\n<hr>\n<br>\n\n\n## <font size=\"6\" face=\"黑体\" color=#005432 >**结语**</font>\n\n\n&emsp;&emsp;图例过滤功能的开发，既减少了用户手动查找相应地块和汇总的时间，提高了地图的可阅读性。让用户通过移动设备简单的操作地图中同一类型的地块汇总，并通过绘制图层让用户在地图上更直观的看清板块对象。\n\n\n\n<br>\n\n<image src=\"http://www.dist.com.cn/templates/cn/images/logo.png\" align=\"right\">\n<br>&emsp;\n\n<br>\n<hr>\n\n\n\n\n\n\n\n\n","content":"<p><header> </header></p>\n<td bgcolor=\"#0099ff\"><br><br>   <center><table><tr><td bgcolor=\"#333333\"><font size=\"7\" face=\"黑体\" color=\"#ffffff\"><strong>移动图例过滤功能</strong></font></td></tr></table></center><br><br><br></td>\n\n<p></p>\n<p><div style=\"text-align: right\"><font size=\"4\"><br>—– &emsp;<br> xiaoshuiz<br>&emsp;  &emsp;&emsp;&emsp;<br> </font><br></div><br><br></p>\n<h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a><font size=\"6\" face=\"黑体\" color=\"#005432\"><strong>简介</strong></font></h2><font size=\"4\">图例过滤是对于多图例图层的一种查看方式，这种查看方式方便对特定类型的图块进行统一查看。</font><br><br><br><font size=\"4\">多图例图层一般为DynamicLayer与FeatureLayer,而且单个图例的图层与多个图例的图层，其渲染器也是不同的，单个图例的为SimpleRenderer，多个图例为UniqueValueRenderer。</font><br><br><br><font color=\"#664499\" size=\"4\">在本文中，图例过滤主要为对图例进行特定过滤达到多图层互斥过滤的效果，另外对于在线图例过滤使用了Layer Definition进行图层Visible控制问题。</font>\n\n<p><hr><br><br></p>\n<h2 id=\"实现逻辑略析\"><a href=\"#实现逻辑略析\" class=\"headerlink\" title=\"实现逻辑略析\"></a><font size=\"6\" face=\"黑体\" color=\"#005432\"><strong>实现逻辑略析</strong></font></h2><ol>\n<li>可视化与相关功能操作监听的基本实现<br></li>\n</ol>\n<ol start=\"2\">\n<li>加载功能基础的分析操作图层与其图例<br></li>\n</ol>\n<ol start=\"3\">\n<li>单个图例的点击并获取其LabelName<br></li>\n</ol>\n<ol start=\"4\">\n<li><font color=\"#664499\">在线将ArcGisDynamicServiceLayer通过ArcGisFeatureLayer加载，并获取其Renderer转为UniqueValueRenderer（离线获取FeatureLayer的Renderer） 并获取Render中的Feild1字段<font color=\"#ee0000\">（配置的过滤字段）</font></font><br></li>\n</ol>\n<ol start=\"5\">\n<li><font color=\"#664499\">WhereClause语句的拼接（过滤字段与LabelName中的值拼接成Sql Where语句）</font><br></li>\n</ol>\n<ol start=\"6\">\n<li><p><font color=\"#664499\">在线通过设置ArcGisDynamicServiceLayer的LayerDefinition（离线通过设置FeatureLayer的DefinitionExpression）进行过滤</font><br></p>\n</li>\n<li><p>对于在线DynamicLayer多图层控制显示问题，将Visible控制可视改为Layer Definition控制可视，只维护一套属性。</p>\n</li>\n</ol>\n<p><hr><br><br></p>\n<h2 id=\"重要部分代码实现\"><a href=\"#重要部分代码实现\" class=\"headerlink\" title=\"重要部分代码实现\"></a><font size=\"6\" face=\"黑体\" color=\"#ffb022\"><strong>重要</strong></font><font size=\"6\" face=\"黑体\" color=\"#005432\"><strong>部分代码实现</strong></font></h2><h3 id=\"1-LayerDefinition控制可视\"><a href=\"#1-LayerDefinition控制可视\" class=\"headerlink\" title=\"1.LayerDefinition控制可视\"></a>1.<font size=\"5\" face=\"黑体\"><strong>LayerDefinition控制可视</strong></font><br></h3><blockquote>\n<p>/** </p>\n<p>  **   根据visibleIds 更新DynamicLayer 通过DynamicLayer的Definition进行控制显示</p>\n<p>  ** Definition中 1-&gt; “1=1” 表示图层 1 全部显示</p>\n<p>  **/<br> <br></p>\n</blockquote>\n<pre><code>//要存储的LayerDefinitions\nMap&lt;String, Map&lt;Integer, String&gt;&gt; dynamicLayerDefinitionMap = TotalApplication.getDynamicLayerDefinitionMap();\n//要操作的LayerDefinitions\nMap&lt;Integer, String&gt; layerDefinitions = dynamicLayer.getLayerDefinitions();\nif (layerDefinitions==null) {\n    layerDefinitions=new HashMap&lt;&gt;();\n}\nif (isOpenLayer) {\n    //显示\n    if (dynamicLayerDefinitionMap.containsKey(dynamicLayer.getUrl())) {\n        //从存储语句中获取之前的过滤语句\n        for (int visibleId : visibleIds) {\n\n            Map&lt;Integer, String&gt; integerStringMap = dynamicLayerDefinitionMap.get(dynamicLayer.getUrl());\n            if (integerStringMap.containsKey(visibleId)\n                    &amp;&amp;integerStringMap.get(visibleId)!=null\n                    &amp;&amp;!Constants.SQL_FALSE.equalsIgnoreCase(integerStringMap.get(visibleId))) {\n                //已存该layer的id的Layer Definition Sql 语句\n                layerDefinitions.put(visibleId,integerStringMap.get(visibleId));\n            }else {\n                //全部显示\n                layerDefinitions.put(visibleId,Constants.SQL_TURE);\n            }\n        }\n    }else {\n        //全部显示\n        for (int visibleId : visibleIds) {\n            layerDefinitions.put(visibleId,Constants.SQL_TURE);\n        }\n    }\n}else {\n    //关闭\n    if (!layerDefinitions.isEmpty()) {\n        Map&lt;Integer, String&gt; integerStringMap;\n        if (dynamicLayerDefinitionMap.containsKey(dynamicLayer.getUrl())) {\n            //存储中有这个Layer的Definition\n            integerStringMap = dynamicLayerDefinitionMap.get(dynamicLayer.getUrl());\n        }else {\n            //存储中没有这个layer的definition\n            integerStringMap=new HashMap&lt;&gt;();\n        }\n        for (int visibleId : visibleIds) {\n            if (layerDefinitions.containsKey(visibleId)\n                    &amp;&amp;layerDefinitions.get(visibleId)!=null\n                    &amp;&amp;!Constants.SQL_FALSE.equalsIgnoreCase(layerDefinitions.get(visibleId))) {\n                //有可视语句，进行储存\n                integerStringMap.put(visibleId,layerDefinitions.get(visibleId));\n            }\n            //取消可视\n            layerDefinitions.put(visibleId,Constants.SQL_FALSE);\n        }\n        TotalApplication.getDynamicLayerDefinitionMap().put(dynamicLayer.getUrl(),integerStringMap);\n\n    }else {\n        //一般走不到这，避免花里胡哨的操作\n        for (int visibleId : visibleIds) {\n            //取消可视\n            layerDefinitions.put(visibleId,Constants.SQL_FALSE);\n        }\n    }\n}\ndynamicLayer.setLayerDefinitions(layerDefinitions);\ndynamicLayer.refresh();\n</code></pre><p><br></p>\n<h3 id=\"2-Render获取与过滤字段获取\"><a href=\"#2-Render获取与过滤字段获取\" class=\"headerlink\" title=\"2.Render获取与过滤字段获取\"></a>2.<font size=\"5\" face=\"黑体\"><strong>Render获取与过滤字段获取</strong></font><br></h3><blockquote>\n<p>  离线获取</p>\n</blockquote>\n<p>离线用的FeatureLayer.getRenderer()<br><br></p>\n<pre><code> FeatureLayer featureLayer= (FeatureLayer) layer;\n//判断是否获取过，避免重复查询\nif (TotalApplication.getInstanceFilterFieldMap().containsKey(layerName)) {\n    filterField=TotalApplication.getInstanceFilterFieldMap().get(layerName);\n}else{\n    //记录已查询 以免无结果 重复查询\n    TotalApplication.getInstanceFilterFieldMap().put(layerName,Constants.NO_FILTER_FIELD);\n    filterField=Constants.NO_FILTER_FIELD;\n    //获取过滤字段\n    Renderer renderer = featureLayer.getRenderer();\n    if (renderer instanceof UniqueValueRenderer) {\n        UniqueValueRenderer uniqueValueRenderer= (UniqueValueRenderer) renderer;\n        filterField = uniqueValueRenderer.getField1();\n        TotalApplication.getInstanceFilterFieldMap().put(layerName,filterField);\n    }\n}\n</code></pre><p><br></p>\n<blockquote>\n<p>  在线获取</p>\n</blockquote>\n<p>在线通过加载ArcGisFeatureLayer获取Renderer中的过滤字段<br><br></p>\n<pre><code>//Renderer中过滤字段的查询和保存，避免重复加载 例：RDDM\nif (TotalApplication.getInstanceFilterFieldMap().keySet().contains(url+Constants.SPLIT_SYMBOL[4]+layerID)) {\n    //通知过滤\n}else{\n    final ArcGISFeatureLayer arcGISFeatureLayer= new ArcGISFeatureLayer(url+Constants.SPLIT_SYMBOL[4]+layerID, ArcGISFeatureLayer.MODE.SELECTION);\n    final String finalUrl = url;\n    final String finalLayerID = layerID;\n    arcGISFeatureLayer.setOnStatusChangedListener(new OnStatusChangedListener() {\n        @Override\n        public void onStatusChanged(Object o, STATUS status) {\n            if (status== STATUS.INITIALIZED) {\n                //记录已查询 以免无结果 重复查询\n                TotalApplication.getInstanceFilterFieldMap().put(arcGISFeatureLayer.getUrl(),Constants.NO_FILTER_FIELD);\n                Renderer renderer = arcGISFeatureLayer.getRenderer();\n                if (renderer!=null) {\n\n                    if (renderer instanceof UniqueValueRenderer) {\n                        UniqueValueRenderer uniqueValueRenderer= (UniqueValueRenderer) renderer;\n                        //获取过滤字段 RDDM\n                        String filterField = uniqueValueRenderer.getField1();\n                        if (filterField!=null&amp;&amp;!filterField.isEmpty()) {\n                            TotalApplication.getInstanceFilterFieldMap().put(arcGISFeatureLayer.getUrl(),filterField);\n                        }\n                    }\n                }\n                //通知过滤\n            }\n\n        }\n    });\n}  \n</code></pre><h3 id=\"3-图例过滤\"><a href=\"#3-图例过滤\" class=\"headerlink\" title=\"3.图例过滤\"></a>3.<font size=\"5\" face=\"黑体\" color=\"#ff0000\"><strong>图例过滤</strong></font><br></h3><blockquote>\n<p>  离线过滤</p>\n</blockquote>\n<p>离线用的FeatureLayer过滤 FeatureLayer的LayerDefinition为 String (Sql Where Clause)，<br><br><br>无需控制图层，且可以和Visible混合使用</p>\n<pre><code>//图例过滤 例：YDDM = &apos;mc&apos;\nfeatureLayer.setDefinitionExpression(filterField+Constants.WHERE_EQUAL+Constants.WHERE_QUOTATION_MARKS+finalLegendLabel+Constants.WHERE_QUOTATION_MARKS);\n</code></pre><p><br></p>\n<blockquote>\n<p>  在线过滤</p>\n</blockquote>\n<p>在线用的ArcGISDynamicMapServiceLayer过滤<br><br>ArcGISDynamicMapServiceLayer的LayerDefinition为Map&lt; int(layerId) , String(Sql Where Clause) &gt;，<br><br><br>得到所需数据进行过滤<br><br></p>\n<pre><code>//图例过滤\nif (filterField!=null&amp;&amp;!Constants.NO_FILTER_FIELD.equalsIgnoreCase(filterField)&amp;&amp;!filterField.isEmpty()) {\n    if (layer instanceof ArcGISDynamicMapServiceLayer) {\n        //拼组Sql Where clause 并设置LayerDefinitions 进行过滤\n        Map&lt;Integer, String&gt; layerDefinitions = ((ArcGISDynamicMapServiceLayer) layer).getLayerDefinitions();\n        if (layerDefinitions==null) {\n            layerDefinitions=new HashMap&lt;Integer, String&gt;();\n        }\n        //map中： layerId -&gt; where clause   YDDM = &apos;G1&apos;\n        layerDefinitions.put(Integer.parseInt(layerId),filterField+Constants.WHERE_EQUAL+Constants.WHERE_QUOTATION_MARKS+legendName+Constants.WHERE_QUOTATION_MARKS);\n        ((ArcGISDynamicMapServiceLayer) layer).setLayerDefinitions(layerDefinitions);\n        ((ArcGISDynamicMapServiceLayer) layer).refresh();\n    }\n}\n</code></pre><h3 id=\"4-结束过滤-全部显示\"><a href=\"#4-结束过滤-全部显示\" class=\"headerlink\" title=\"4.结束过滤(全部显示)\"></a>4.<font size=\"5\" face=\"黑体\" color=\"#ff0000\"><strong>结束过滤(全部显示)</strong></font><br></h3><blockquote>\n<p> 离线结束过滤</p>\n</blockquote>\n<pre><code>Map&lt;String, Layer&gt; layerMap = TotalApplication.getInstanceAllLayerMap();\nif (layerMap.containsKey(name)) {\n    Layer layer = layerMap.get(name);\n    if (layer instanceof FeatureLayer) {\n        //设置LayerDefinition\n        ((FeatureLayer) layer).setDefinitionExpression(Constants.SQL_TURE);\n        //数据改变\n        legendAdapter.selectLabel= Constants.NO_SELECT;\n        TotalApplication.getLayerSelectLabelMap().put(name,Constants.NO_SELECT);\n        legendAdapter.notifyDataSetChanged();\n    }\n}\n</code></pre><p><br></p>\n<blockquote>\n<p> 在线结束过滤</p>\n</blockquote>\n<pre><code>//获取当前layer对应的Service Layer 的URL与Id\nList&lt;ThemeInfo&gt; theme = oneMapActivity.mDataSource.getTheme();\nfor (ThemeInfo themeInfo : theme) {\n    if (name.equalsIgnoreCase(themeInfo.getName())) {\n        serviceUID=themeInfo.getServiceUid();\n        layerID=themeInfo.getLayerId();\n    }\n}\nList&lt;MapServicesInfo&gt; mapServices = oneMapActivity.mDataSource.getMapServices();\nfor (MapServicesInfo mapService : mapServices) {\n    if (serviceUID!=null&amp;&amp;serviceUID.equalsIgnoreCase(mapService.getName())) {\n        url=mapService.getUrl();\n    }\n}\n//数据改变\nlegendAdapter.selectLabel= Constants.NO_SELECT;\nTotalApplication.getLayerSelectLabelMap().put(name,Constants.NO_SELECT);\nlegendAdapter.notifyDataSetChanged();\n//TODO 通知图例过滤\n</code></pre><p><br><br>全部显示</p>\n<pre><code>if (layer instanceof ArcGISDynamicMapServiceLayer) {\n    Map&lt;Integer, String&gt; layerDefinitions = ((ArcGISDynamicMapServiceLayer) layer).getLayerDefinitions();\n    if (layerDefinitions==null){\n        layerDefinitions=new HashMap&lt;Integer, String&gt;();\n    }\n    layerDefinitions.put(Integer.parseInt(layerId),Constants.SQL_TURE);\n    ((ArcGISDynamicMapServiceLayer) layer).setLayerDefinitions(layerDefinitions);\n    ((ArcGISDynamicMapServiceLayer) layer).refresh();\n}\n</code></pre><p><hr><br><br></p>\n<h2 id=\"结语\"><a href=\"#结语\" class=\"headerlink\" title=\"结语\"></a><font size=\"6\" face=\"黑体\" color=\"#005432\"><strong>结语</strong></font></h2><p>&emsp;&emsp;图例过滤功能的开发，既减少了用户手动查找相应地块和汇总的时间，提高了地图的可阅读性。让用户通过移动设备简单的操作地图中同一类型的地块汇总，并通过绘制图层让用户在地图上更直观的看清板块对象。</p>\n<p><br></p>\n<p><image src=\"http://www.dist.com.cn/templates/cn/images/logo.png\" align=\"right\"><br><br>&emsp;</image></p>\n<p><br></p>\n<hr>\n\n\n\n\n\n\n\n\n","slug":"legendfilter","updated":"2018-11-01T08:16:35.123Z","comments":true,"link":"","permalink":"http://yoursite.com/2018/07/24/legendfilter/","excerpt":"","categories":[{"name":"工作","slug":"工作","permalink":"http://yoursite.com/categories/工作/"}],"tags":[{"name":"Android","slug":"Android","permalink":"http://yoursite.com/tags/Android/"}]},{"title":"最も重要な結婚式","date":"2018-06-16T01:16:24.000Z","path":"2018/06/16/姐姐结婚了/","text":"最も重要な結婚式今天是我可爱的小妹妹结婚的大喜之日 欢喜中夹杂个各种感受。 想想以后年夜饭又少一位不免难受 但多了一个姐夫 家里又多了一位成员 甚至有了侄子就多了若干位小成员 心里还美美的 但是你结婚之后家里就开始催我了呀 就开始了全家总动员的催婚大法 还记得今天回酒店 酒店阿姨说诶你怎么回来了 你老婆呢 我一脸懵住了 阿姨说看我带着个红花 以为是我结婚 哈哈哈 阿姨还说姐姐很漂亮 是个美丽的新娘 酒席上叔叔婶婶也在催 说什么时候把那位领回家 明明是一个城市的 那么多年了还不领回家 心里也不知道怎么去回应 最近的事情也很多 我也毕业了 要去工作了 驾照考完了 最重要的当然是这个唯一的姐姐结婚了 姐夫也是个不错的人 愿你们相互扶持 能够好好的过这一辈子 愿你永远十八岁 要不开头叫你妹妹嘛 毕竟我都二十多的人了嘛 总之呢 不管在哪里 这辈子一定要过的开开心心呀 致天底下最可爱的真真.","raw":"\n---\ntitle: 最も重要な結婚式\ndate: 2018-06-16 09:16:24\ntags: 姐姐婚礼\ncategories: 生活\n---\n\n## 最も重要な結婚式\n\n\n<br>\n<br>\n今天是我可爱的小妹妹结婚的<font color=#ff7072 >大喜之日</font> 欢喜中夹杂个各种感受。 <br>\n\n![](https://i.imgur.com/L5HDMz5.jpg)\n\n想想以后年夜饭又少一位不免难受 但多了一个姐夫 家里又多了一位成员 甚至有了侄子就多了若干位小成员 心里还美美的<br>\n\n![](https://i.imgur.com/qpzMxl5.jpg)\n\n 但是你结婚之后家里就开始催我了呀 就开始了全家总动员的催婚大法 还记得今天回酒店 酒店阿姨说诶你怎么回来了 你老婆呢 我一脸懵住了 阿姨说看我带着个红花 以为是我结婚 哈哈哈 阿姨还说姐姐很漂亮 是个美丽的新娘 酒席上叔叔婶婶也在催 说什么时候把那位领回家 明明是一个城市的 那么多年了还不领回家 心里也不知道怎么去回应 <br>\n\n![](https://i.imgur.com/VkBaCvo.jpg)\n\n\n最近的事情也很多 我也毕业了 要去工作了 驾照考完了 最重要的当然是这个唯一的姐姐结婚了 姐夫也是个不错的人 愿你们相互扶持  能够好好的过这一辈子 <br><br>\n愿你永远十八岁 要不开头叫你妹妹嘛 毕竟我都二十多的人了嘛 总之呢 不管在哪里 这辈子一定要过的开开心心呀<br>\n\n![](https://i.imgur.com/O9elIJy.jpg)\n\n<br>\n\n 致天底下最可爱的<font color=#ff7072 >真真.</font>\n\n\n\n<br>\n","content":"<h2 id=\"最も重要な結婚式\"><a href=\"#最も重要な結婚式\" class=\"headerlink\" title=\"最も重要な結婚式\"></a>最も重要な結婚式</h2><p><br><br><br><br>今天是我可爱的小妹妹结婚的<font color=\"#ff7072\">大喜之日</font> 欢喜中夹杂个各种感受。 <br></p>\n<p><img src=\"https://i.imgur.com/L5HDMz5.jpg\" alt=\"\"></p>\n<p>想想以后年夜饭又少一位不免难受 但多了一个姐夫 家里又多了一位成员 甚至有了侄子就多了若干位小成员 心里还美美的<br></p>\n<p><img src=\"https://i.imgur.com/qpzMxl5.jpg\" alt=\"\"></p>\n<p> 但是你结婚之后家里就开始催我了呀 就开始了全家总动员的催婚大法 还记得今天回酒店 酒店阿姨说诶你怎么回来了 你老婆呢 我一脸懵住了 阿姨说看我带着个红花 以为是我结婚 哈哈哈 阿姨还说姐姐很漂亮 是个美丽的新娘 酒席上叔叔婶婶也在催 说什么时候把那位领回家 明明是一个城市的 那么多年了还不领回家 心里也不知道怎么去回应 <br></p>\n<p><img src=\"https://i.imgur.com/VkBaCvo.jpg\" alt=\"\"></p>\n<p>最近的事情也很多 我也毕业了 要去工作了 驾照考完了 最重要的当然是这个唯一的姐姐结婚了 姐夫也是个不错的人 愿你们相互扶持  能够好好的过这一辈子 <br><br><br>愿你永远十八岁 要不开头叫你妹妹嘛 毕竟我都二十多的人了嘛 总之呢 不管在哪里 这辈子一定要过的开开心心呀<br></p>\n<p><img src=\"https://i.imgur.com/O9elIJy.jpg\" alt=\"\"></p>\n<p><br></p>\n<p> 致天底下最可爱的<font color=\"#ff7072\">真真.</font></p>\n<p><br></p>\n","slug":"姐姐结婚了","updated":"2018-10-08T09:17:10.248Z","comments":true,"link":"","permalink":"http://yoursite.com/2018/06/16/姐姐结婚了/","excerpt":"","categories":[{"name":"生活","slug":"生活","permalink":"http://yoursite.com/categories/生活/"}],"tags":[{"name":"姐姐婚礼","slug":"姐姐婚礼","permalink":"http://yoursite.com/tags/姐姐婚礼/"}]},{"title":"Bilibili World 2017","date":"2017-07-21T01:16:24.000Z","path":"2017/07/21/BW旅行/","text":"Bilibili world 2017提前许多天抢到了票，想想这个暑假本来是要决定在上海实习的，结果玩心那么大。管他那么多！Bilibili World 我来辣！ 不过今天外面的太阳是真的大，热死了，你看小电视都热化了！ 再看看屋里的小电视！ 差距啊！你看 还有2233小姐姐！ 不过啊！ 人也太多了8! 不过总算挤进来了。 还有不少小姐姐在板绘，里面的活动好多啊 都拍不过来了！ 还有泽野大神的歌，不过是个录像，就不放出来了，给你们看看五毛路的CV哦！ 其实这里是禁止拍照的啊.. 最后离开的时候还留下了签名，哈哈哈哈 签的咩咩 ，这只傻羊，毕竟你没来成嘛，爱你哦，好好加油，好好考研！ 一天就这样结束了，很nice呢！","raw":"\n---\ntitle: Bilibili World 2017\ndate: 2017-07-21 09:16:24\ntags: BW2017\ncategories: 游玩\n---\n\n## Bilibili world 2017\n\n\n<br>\n<br>\n提前许多天抢到了票，想想这个暑假本来是要决定在上海实习的，结果玩心那么大。<br>\n管他那么多！<font color=#ff7072 >Bilibili World</font>    我来辣！<br>\n\n![](https://i.imgur.com/CKRoWmt.jpg)\n\n\n\n不过今天外面的太阳是真的大，热死了，你看小电视都热化了！\n<br>\n![](https://i.imgur.com/gx30Hgj.jpg)\n\n再看看屋里的小电视！\n<br>\n![](https://i.imgur.com/9hRiUDU.jpg)\n\n差距啊！你看 还有2233小姐姐！<br>\n\n不过啊！ 人也太多了8!<br>\n\n![](https://i.imgur.com/Ujfk6Gh.jpg)\n\n不过总算挤进来了。<br>\n\n![](https://i.imgur.com/rpxsE2J.jpg)\n\n![](https://i.imgur.com/l0gadZm.jpg)\n\n还有不少小姐姐在板绘，里面的活动好多啊 都拍不过来了！<br>\n\n![](https://i.imgur.com/C6t0vDK.jpg)\n\n还有泽野大神的歌，不过是个录像，就不放出来了，给你们看看五毛路的CV哦！<br>\n\n![](https://i.imgur.com/1cpP9NG.jpg)\n\n其实这里是禁止拍照的啊..\n\n最后离开的时候还留下了签名，哈哈哈哈 签的咩咩 ，这只傻羊，毕竟你没来成嘛，爱你哦，好好加油，好好考研！\n\n\n\n <br>\n\n\n![](https://i.imgur.com/THfOm2e.jpg)\n\n\n\n<br>\n\n一天就这样结束了，很nice呢！","content":"<h2 id=\"Bilibili-world-2017\"><a href=\"#Bilibili-world-2017\" class=\"headerlink\" title=\"Bilibili world 2017\"></a>Bilibili world 2017</h2><p><br><br><br><br>提前许多天抢到了票，想想这个暑假本来是要决定在上海实习的，结果玩心那么大。<br><br>管他那么多！<font color=\"#ff7072\">Bilibili World</font>    我来辣！<br></p>\n<p><img src=\"https://i.imgur.com/CKRoWmt.jpg\" alt=\"\"></p>\n<p>不过今天外面的太阳是真的大，热死了，你看小电视都热化了！<br><br><br><img src=\"https://i.imgur.com/gx30Hgj.jpg\" alt=\"\"></p>\n<p>再看看屋里的小电视！<br><br><br><img src=\"https://i.imgur.com/9hRiUDU.jpg\" alt=\"\"></p>\n<p>差距啊！你看 还有2233小姐姐！<br></p>\n<p>不过啊！ 人也太多了8!<br></p>\n<p><img src=\"https://i.imgur.com/Ujfk6Gh.jpg\" alt=\"\"></p>\n<p>不过总算挤进来了。<br></p>\n<p><img src=\"https://i.imgur.com/rpxsE2J.jpg\" alt=\"\"></p>\n<p><img src=\"https://i.imgur.com/l0gadZm.jpg\" alt=\"\"></p>\n<p>还有不少小姐姐在板绘，里面的活动好多啊 都拍不过来了！<br></p>\n<p><img src=\"https://i.imgur.com/C6t0vDK.jpg\" alt=\"\"></p>\n<p>还有泽野大神的歌，不过是个录像，就不放出来了，给你们看看五毛路的CV哦！<br></p>\n<p><img src=\"https://i.imgur.com/1cpP9NG.jpg\" alt=\"\"></p>\n<p>其实这里是禁止拍照的啊..</p>\n<p>最后离开的时候还留下了签名，哈哈哈哈 签的咩咩 ，这只傻羊，毕竟你没来成嘛，爱你哦，好好加油，好好考研！</p>\n<p> <br></p>\n<p><img src=\"https://i.imgur.com/THfOm2e.jpg\" alt=\"\"></p>\n<p><br></p>\n<p>一天就这样结束了，很nice呢！</p>\n","slug":"BW旅行","updated":"2018-11-01T08:14:01.423Z","comments":true,"link":"","permalink":"http://yoursite.com/2017/07/21/BW旅行/","excerpt":"","categories":[{"name":"游玩","slug":"游玩","permalink":"http://yoursite.com/categories/游玩/"}],"tags":[{"name":"BW2017","slug":"BW2017","permalink":"http://yoursite.com/tags/BW2017/"}]}]}